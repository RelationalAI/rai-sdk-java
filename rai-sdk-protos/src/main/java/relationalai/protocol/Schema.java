// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

package relationalai.protocol;

public final class Schema {
  private Schema() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * next available: 19
   * </pre>
   *
   * Protobuf enum {@code relationalai.protocol.PrimitiveType}
   */
  public enum PrimitiveType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * https://developers.google.com/protocol-buffers/docs/style#enums
     * </pre>
     *
     * <code>UNSPECIFIED_TYPE = 0;</code>
     */
    UNSPECIFIED_TYPE(0),
    /**
     * <pre>
     * Not present in protobuf, needs two 64-bit ints
     * </pre>
     *
     * <code>INT_128 = 1;</code>
     */
    INT_128(1),
    /**
     * <code>INT_64 = 2;</code>
     */
    INT_64(2),
    /**
     * <code>INT_32 = 3;</code>
     */
    INT_32(3),
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>INT_16 = 4;</code>
     */
    INT_16(4),
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>INT_8 = 5;</code>
     */
    INT_8(5),
    /**
     * <pre>
     * Not present in protobuf, needs two 64-bit ints
     * </pre>
     *
     * <code>UINT_128 = 6;</code>
     */
    UINT_128(6),
    /**
     * <code>UINT_64 = 7;</code>
     */
    UINT_64(7),
    /**
     * <code>UINT_32 = 8;</code>
     */
    UINT_32(8),
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>UINT_16 = 9;</code>
     */
    UINT_16(9),
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>UINT_8 = 10;</code>
     */
    UINT_8(10),
    /**
     * <code>FLOAT_64 = 11;</code>
     */
    FLOAT_64(11),
    /**
     * <code>FLOAT_32 = 12;</code>
     */
    FLOAT_32(12),
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>FLOAT_16 = 13;</code>
     */
    FLOAT_16(13),
    /**
     * <code>CHAR = 14;</code>
     */
    CHAR(14),
    /**
     * <code>BOOL = 15;</code>
     */
    BOOL(15),
    /**
     * <pre>
     * these share the string_val field
     * </pre>
     *
     * <code>STRING = 16;</code>
     */
    STRING(16),
    /**
     * <pre>
     * In protobuf this is really bytes.
     * </pre>
     *
     * <code>SYMBOL = 17;</code>
     */
    SYMBOL(17),
    /**
     * <pre>
     * VariableSizeStrings are not supported as PrimitiveValues, though the type can
     * show up in (internal) type signatures.
     * </pre>
     *
     * <code>VARIABLE_SIZE_STRING = 18;</code>
     */
    VARIABLE_SIZE_STRING(18),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * https://developers.google.com/protocol-buffers/docs/style#enums
     * </pre>
     *
     * <code>UNSPECIFIED_TYPE = 0;</code>
     */
    public static final int UNSPECIFIED_TYPE_VALUE = 0;
    /**
     * <pre>
     * Not present in protobuf, needs two 64-bit ints
     * </pre>
     *
     * <code>INT_128 = 1;</code>
     */
    public static final int INT_128_VALUE = 1;
    /**
     * <code>INT_64 = 2;</code>
     */
    public static final int INT_64_VALUE = 2;
    /**
     * <code>INT_32 = 3;</code>
     */
    public static final int INT_32_VALUE = 3;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>INT_16 = 4;</code>
     */
    public static final int INT_16_VALUE = 4;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>INT_8 = 5;</code>
     */
    public static final int INT_8_VALUE = 5;
    /**
     * <pre>
     * Not present in protobuf, needs two 64-bit ints
     * </pre>
     *
     * <code>UINT_128 = 6;</code>
     */
    public static final int UINT_128_VALUE = 6;
    /**
     * <code>UINT_64 = 7;</code>
     */
    public static final int UINT_64_VALUE = 7;
    /**
     * <code>UINT_32 = 8;</code>
     */
    public static final int UINT_32_VALUE = 8;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>UINT_16 = 9;</code>
     */
    public static final int UINT_16_VALUE = 9;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>UINT_8 = 10;</code>
     */
    public static final int UINT_8_VALUE = 10;
    /**
     * <code>FLOAT_64 = 11;</code>
     */
    public static final int FLOAT_64_VALUE = 11;
    /**
     * <code>FLOAT_32 = 12;</code>
     */
    public static final int FLOAT_32_VALUE = 12;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>FLOAT_16 = 13;</code>
     */
    public static final int FLOAT_16_VALUE = 13;
    /**
     * <code>CHAR = 14;</code>
     */
    public static final int CHAR_VALUE = 14;
    /**
     * <code>BOOL = 15;</code>
     */
    public static final int BOOL_VALUE = 15;
    /**
     * <pre>
     * these share the string_val field
     * </pre>
     *
     * <code>STRING = 16;</code>
     */
    public static final int STRING_VALUE = 16;
    /**
     * <pre>
     * In protobuf this is really bytes.
     * </pre>
     *
     * <code>SYMBOL = 17;</code>
     */
    public static final int SYMBOL_VALUE = 17;
    /**
     * <pre>
     * VariableSizeStrings are not supported as PrimitiveValues, though the type can
     * show up in (internal) type signatures.
     * </pre>
     *
     * <code>VARIABLE_SIZE_STRING = 18;</code>
     */
    public static final int VARIABLE_SIZE_STRING_VALUE = 18;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PrimitiveType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PrimitiveType forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_TYPE;
        case 1: return INT_128;
        case 2: return INT_64;
        case 3: return INT_32;
        case 4: return INT_16;
        case 5: return INT_8;
        case 6: return UINT_128;
        case 7: return UINT_64;
        case 8: return UINT_32;
        case 9: return UINT_16;
        case 10: return UINT_8;
        case 11: return FLOAT_64;
        case 12: return FLOAT_32;
        case 13: return FLOAT_16;
        case 14: return CHAR;
        case 15: return BOOL;
        case 16: return STRING;
        case 17: return SYMBOL;
        case 18: return VARIABLE_SIZE_STRING;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PrimitiveType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PrimitiveType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PrimitiveType>() {
            public PrimitiveType findValueByNumber(int number) {
              return PrimitiveType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return relationalai.protocol.Schema.getDescriptor().getEnumTypes().get(0);
    }

    private static final PrimitiveType[] VALUES = values();

    public static PrimitiveType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PrimitiveType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:relationalai.protocol.PrimitiveType)
  }

  /**
   * Protobuf enum {@code relationalai.protocol.Kind}
   */
  public enum Kind
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * https://developers.google.com/protocol-buffers/docs/style#enums
     * </pre>
     *
     * <code>UNSPECIFIED_KIND = 0;</code>
     */
    UNSPECIFIED_KIND(0),
    /**
     * <code>PRIMITIVE_TYPE = 1;</code>
     */
    PRIMITIVE_TYPE(1),
    /**
     * <code>VALUE_TYPE = 2;</code>
     */
    VALUE_TYPE(2),
    /**
     * <code>CONSTANT_TYPE = 3;</code>
     */
    CONSTANT_TYPE(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * https://developers.google.com/protocol-buffers/docs/style#enums
     * </pre>
     *
     * <code>UNSPECIFIED_KIND = 0;</code>
     */
    public static final int UNSPECIFIED_KIND_VALUE = 0;
    /**
     * <code>PRIMITIVE_TYPE = 1;</code>
     */
    public static final int PRIMITIVE_TYPE_VALUE = 1;
    /**
     * <code>VALUE_TYPE = 2;</code>
     */
    public static final int VALUE_TYPE_VALUE = 2;
    /**
     * <code>CONSTANT_TYPE = 3;</code>
     */
    public static final int CONSTANT_TYPE_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Kind valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Kind forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_KIND;
        case 1: return PRIMITIVE_TYPE;
        case 2: return VALUE_TYPE;
        case 3: return CONSTANT_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Kind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Kind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Kind>() {
            public Kind findValueByNumber(int number) {
              return Kind.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return relationalai.protocol.Schema.getDescriptor().getEnumTypes().get(1);
    }

    private static final Kind[] VALUES = values();

    public static Kind valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Kind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:relationalai.protocol.Kind)
  }

  public interface RelationIdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.RelationId)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    java.util.List<relationalai.protocol.Schema.RelType> 
        getArgumentsList();
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    relationalai.protocol.Schema.RelType getArguments(int index);
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    int getArgumentsCount();
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    java.util.List<? extends relationalai.protocol.Schema.RelTypeOrBuilder> 
        getArgumentsOrBuilderList();
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    relationalai.protocol.Schema.RelTypeOrBuilder getArgumentsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Relations are currently identified by their type signature.
   * </pre>
   *
   * Protobuf type {@code relationalai.protocol.RelationId}
   */
  public static final class RelationId extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.RelationId)
      RelationIdOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RelationId.newBuilder() to construct.
    private RelationId(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RelationId() {
      arguments_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RelationId();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RelationId(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                arguments_ = new java.util.ArrayList<relationalai.protocol.Schema.RelType>();
                mutable_bitField0_ |= 0x00000001;
              }
              arguments_.add(
                  input.readMessage(relationalai.protocol.Schema.RelType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          arguments_ = java.util.Collections.unmodifiableList(arguments_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelationId_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelationId_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.RelationId.class, relationalai.protocol.Schema.RelationId.Builder.class);
    }

    public static final int ARGUMENTS_FIELD_NUMBER = 1;
    private java.util.List<relationalai.protocol.Schema.RelType> arguments_;
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    @java.lang.Override
    public java.util.List<relationalai.protocol.Schema.RelType> getArgumentsList() {
      return arguments_;
    }
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends relationalai.protocol.Schema.RelTypeOrBuilder> 
        getArgumentsOrBuilderList() {
      return arguments_;
    }
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    @java.lang.Override
    public int getArgumentsCount() {
      return arguments_.size();
    }
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelType getArguments(int index) {
      return arguments_.get(index);
    }
    /**
     * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelTypeOrBuilder getArgumentsOrBuilder(
        int index) {
      return arguments_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < arguments_.size(); i++) {
        output.writeMessage(1, arguments_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < arguments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, arguments_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.RelationId)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.RelationId other = (relationalai.protocol.Schema.RelationId) obj;

      if (!getArgumentsList()
          .equals(other.getArgumentsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgumentsCount() > 0) {
        hash = (37 * hash) + ARGUMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.RelationId parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelationId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelationId parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelationId parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.RelationId prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Relations are currently identified by their type signature.
     * </pre>
     *
     * Protobuf type {@code relationalai.protocol.RelationId}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.RelationId)
        relationalai.protocol.Schema.RelationIdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelationId_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelationId_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.RelationId.class, relationalai.protocol.Schema.RelationId.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.RelationId.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgumentsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argumentsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelationId_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelationId getDefaultInstanceForType() {
        return relationalai.protocol.Schema.RelationId.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelationId build() {
        relationalai.protocol.Schema.RelationId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelationId buildPartial() {
        relationalai.protocol.Schema.RelationId result = new relationalai.protocol.Schema.RelationId(this);
        int from_bitField0_ = bitField0_;
        if (argumentsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            arguments_ = java.util.Collections.unmodifiableList(arguments_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.arguments_ = arguments_;
        } else {
          result.arguments_ = argumentsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.RelationId) {
          return mergeFrom((relationalai.protocol.Schema.RelationId)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.RelationId other) {
        if (other == relationalai.protocol.Schema.RelationId.getDefaultInstance()) return this;
        if (argumentsBuilder_ == null) {
          if (!other.arguments_.isEmpty()) {
            if (arguments_.isEmpty()) {
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentsIsMutable();
              arguments_.addAll(other.arguments_);
            }
            onChanged();
          }
        } else {
          if (!other.arguments_.isEmpty()) {
            if (argumentsBuilder_.isEmpty()) {
              argumentsBuilder_.dispose();
              argumentsBuilder_ = null;
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgumentsFieldBuilder() : null;
            } else {
              argumentsBuilder_.addAllMessages(other.arguments_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.RelationId parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.RelationId) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<relationalai.protocol.Schema.RelType> arguments_ =
        java.util.Collections.emptyList();
      private void ensureArgumentsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          arguments_ = new java.util.ArrayList<relationalai.protocol.Schema.RelType>(arguments_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder> argumentsBuilder_;

      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public java.util.List<relationalai.protocol.Schema.RelType> getArgumentsList() {
        if (argumentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(arguments_);
        } else {
          return argumentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public int getArgumentsCount() {
        if (argumentsBuilder_ == null) {
          return arguments_.size();
        } else {
          return argumentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public relationalai.protocol.Schema.RelType getArguments(int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);
        } else {
          return argumentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder setArguments(
          int index, relationalai.protocol.Schema.RelType value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.set(index, value);
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder setArguments(
          int index, relationalai.protocol.Schema.RelType.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder addArguments(relationalai.protocol.Schema.RelType value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder addArguments(
          int index, relationalai.protocol.Schema.RelType value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(index, value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder addArguments(
          relationalai.protocol.Schema.RelType.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder addArguments(
          int index, relationalai.protocol.Schema.RelType.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder addAllArguments(
          java.lang.Iterable<? extends relationalai.protocol.Schema.RelType> values) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, arguments_);
          onChanged();
        } else {
          argumentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder clearArguments() {
        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public Builder removeArguments(int index) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.remove(index);
          onChanged();
        } else {
          argumentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public relationalai.protocol.Schema.RelType.Builder getArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public relationalai.protocol.Schema.RelTypeOrBuilder getArgumentsOrBuilder(
          int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);  } else {
          return argumentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public java.util.List<? extends relationalai.protocol.Schema.RelTypeOrBuilder> 
           getArgumentsOrBuilderList() {
        if (argumentsBuilder_ != null) {
          return argumentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(arguments_);
        }
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public relationalai.protocol.Schema.RelType.Builder addArgumentsBuilder() {
        return getArgumentsFieldBuilder().addBuilder(
            relationalai.protocol.Schema.RelType.getDefaultInstance());
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public relationalai.protocol.Schema.RelType.Builder addArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().addBuilder(
            index, relationalai.protocol.Schema.RelType.getDefaultInstance());
      }
      /**
       * <code>repeated .relationalai.protocol.RelType arguments = 1;</code>
       */
      public java.util.List<relationalai.protocol.Schema.RelType.Builder> 
           getArgumentsBuilderList() {
        return getArgumentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder> 
          getArgumentsFieldBuilder() {
        if (argumentsBuilder_ == null) {
          argumentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder>(
                  arguments_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          arguments_ = null;
        }
        return argumentsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.RelationId)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.RelationId)
    private static final relationalai.protocol.Schema.RelationId DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.RelationId();
    }

    public static relationalai.protocol.Schema.RelationId getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RelationId>
        PARSER = new com.google.protobuf.AbstractParser<RelationId>() {
      @java.lang.Override
      public RelationId parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RelationId(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RelationId> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RelationId> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.RelationId getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RelTupleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.RelTuple)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    java.util.List<relationalai.protocol.Schema.PrimitiveValue> 
        getArgumentsList();
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    relationalai.protocol.Schema.PrimitiveValue getArguments(int index);
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    int getArgumentsCount();
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    java.util.List<? extends relationalai.protocol.Schema.PrimitiveValueOrBuilder> 
        getArgumentsOrBuilderList();
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    relationalai.protocol.Schema.PrimitiveValueOrBuilder getArgumentsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Renamed from Tuple to avoid collision with julia and python `Tuple`.
   * Value types are flattened into their underlying primitive values.
   * </pre>
   *
   * Protobuf type {@code relationalai.protocol.RelTuple}
   */
  public static final class RelTuple extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.RelTuple)
      RelTupleOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RelTuple.newBuilder() to construct.
    private RelTuple(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RelTuple() {
      arguments_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RelTuple();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RelTuple(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                arguments_ = new java.util.ArrayList<relationalai.protocol.Schema.PrimitiveValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              arguments_.add(
                  input.readMessage(relationalai.protocol.Schema.PrimitiveValue.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          arguments_ = java.util.Collections.unmodifiableList(arguments_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelTuple_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelTuple_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.RelTuple.class, relationalai.protocol.Schema.RelTuple.Builder.class);
    }

    public static final int ARGUMENTS_FIELD_NUMBER = 1;
    private java.util.List<relationalai.protocol.Schema.PrimitiveValue> arguments_;
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    @java.lang.Override
    public java.util.List<relationalai.protocol.Schema.PrimitiveValue> getArgumentsList() {
      return arguments_;
    }
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends relationalai.protocol.Schema.PrimitiveValueOrBuilder> 
        getArgumentsOrBuilderList() {
      return arguments_;
    }
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    @java.lang.Override
    public int getArgumentsCount() {
      return arguments_.size();
    }
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.PrimitiveValue getArguments(int index) {
      return arguments_.get(index);
    }
    /**
     * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.PrimitiveValueOrBuilder getArgumentsOrBuilder(
        int index) {
      return arguments_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < arguments_.size(); i++) {
        output.writeMessage(1, arguments_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < arguments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, arguments_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.RelTuple)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.RelTuple other = (relationalai.protocol.Schema.RelTuple) obj;

      if (!getArgumentsList()
          .equals(other.getArgumentsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgumentsCount() > 0) {
        hash = (37 * hash) + ARGUMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.RelTuple parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelTuple parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelTuple parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelTuple parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.RelTuple prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Renamed from Tuple to avoid collision with julia and python `Tuple`.
     * Value types are flattened into their underlying primitive values.
     * </pre>
     *
     * Protobuf type {@code relationalai.protocol.RelTuple}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.RelTuple)
        relationalai.protocol.Schema.RelTupleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelTuple_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelTuple_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.RelTuple.class, relationalai.protocol.Schema.RelTuple.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.RelTuple.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgumentsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argumentsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelTuple_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelTuple getDefaultInstanceForType() {
        return relationalai.protocol.Schema.RelTuple.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelTuple build() {
        relationalai.protocol.Schema.RelTuple result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelTuple buildPartial() {
        relationalai.protocol.Schema.RelTuple result = new relationalai.protocol.Schema.RelTuple(this);
        int from_bitField0_ = bitField0_;
        if (argumentsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            arguments_ = java.util.Collections.unmodifiableList(arguments_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.arguments_ = arguments_;
        } else {
          result.arguments_ = argumentsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.RelTuple) {
          return mergeFrom((relationalai.protocol.Schema.RelTuple)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.RelTuple other) {
        if (other == relationalai.protocol.Schema.RelTuple.getDefaultInstance()) return this;
        if (argumentsBuilder_ == null) {
          if (!other.arguments_.isEmpty()) {
            if (arguments_.isEmpty()) {
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentsIsMutable();
              arguments_.addAll(other.arguments_);
            }
            onChanged();
          }
        } else {
          if (!other.arguments_.isEmpty()) {
            if (argumentsBuilder_.isEmpty()) {
              argumentsBuilder_.dispose();
              argumentsBuilder_ = null;
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgumentsFieldBuilder() : null;
            } else {
              argumentsBuilder_.addAllMessages(other.arguments_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.RelTuple parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.RelTuple) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<relationalai.protocol.Schema.PrimitiveValue> arguments_ =
        java.util.Collections.emptyList();
      private void ensureArgumentsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          arguments_ = new java.util.ArrayList<relationalai.protocol.Schema.PrimitiveValue>(arguments_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          relationalai.protocol.Schema.PrimitiveValue, relationalai.protocol.Schema.PrimitiveValue.Builder, relationalai.protocol.Schema.PrimitiveValueOrBuilder> argumentsBuilder_;

      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public java.util.List<relationalai.protocol.Schema.PrimitiveValue> getArgumentsList() {
        if (argumentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(arguments_);
        } else {
          return argumentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public int getArgumentsCount() {
        if (argumentsBuilder_ == null) {
          return arguments_.size();
        } else {
          return argumentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public relationalai.protocol.Schema.PrimitiveValue getArguments(int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);
        } else {
          return argumentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder setArguments(
          int index, relationalai.protocol.Schema.PrimitiveValue value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.set(index, value);
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder setArguments(
          int index, relationalai.protocol.Schema.PrimitiveValue.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder addArguments(relationalai.protocol.Schema.PrimitiveValue value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder addArguments(
          int index, relationalai.protocol.Schema.PrimitiveValue value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(index, value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder addArguments(
          relationalai.protocol.Schema.PrimitiveValue.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder addArguments(
          int index, relationalai.protocol.Schema.PrimitiveValue.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder addAllArguments(
          java.lang.Iterable<? extends relationalai.protocol.Schema.PrimitiveValue> values) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, arguments_);
          onChanged();
        } else {
          argumentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder clearArguments() {
        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public Builder removeArguments(int index) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.remove(index);
          onChanged();
        } else {
          argumentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public relationalai.protocol.Schema.PrimitiveValue.Builder getArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public relationalai.protocol.Schema.PrimitiveValueOrBuilder getArgumentsOrBuilder(
          int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);  } else {
          return argumentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public java.util.List<? extends relationalai.protocol.Schema.PrimitiveValueOrBuilder> 
           getArgumentsOrBuilderList() {
        if (argumentsBuilder_ != null) {
          return argumentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(arguments_);
        }
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public relationalai.protocol.Schema.PrimitiveValue.Builder addArgumentsBuilder() {
        return getArgumentsFieldBuilder().addBuilder(
            relationalai.protocol.Schema.PrimitiveValue.getDefaultInstance());
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public relationalai.protocol.Schema.PrimitiveValue.Builder addArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().addBuilder(
            index, relationalai.protocol.Schema.PrimitiveValue.getDefaultInstance());
      }
      /**
       * <code>repeated .relationalai.protocol.PrimitiveValue arguments = 1;</code>
       */
      public java.util.List<relationalai.protocol.Schema.PrimitiveValue.Builder> 
           getArgumentsBuilderList() {
        return getArgumentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          relationalai.protocol.Schema.PrimitiveValue, relationalai.protocol.Schema.PrimitiveValue.Builder, relationalai.protocol.Schema.PrimitiveValueOrBuilder> 
          getArgumentsFieldBuilder() {
        if (argumentsBuilder_ == null) {
          argumentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              relationalai.protocol.Schema.PrimitiveValue, relationalai.protocol.Schema.PrimitiveValue.Builder, relationalai.protocol.Schema.PrimitiveValueOrBuilder>(
                  arguments_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          arguments_ = null;
        }
        return argumentsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.RelTuple)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.RelTuple)
    private static final relationalai.protocol.Schema.RelTuple DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.RelTuple();
    }

    public static relationalai.protocol.Schema.RelTuple getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RelTuple>
        PARSER = new com.google.protobuf.AbstractParser<RelTuple>() {
      @java.lang.Override
      public RelTuple parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RelTuple(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RelTuple> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RelTuple> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.RelTuple getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RelInt128OrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.RelInt128)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 highbits = 1;</code>
     * @return The highbits.
     */
    long getHighbits();

    /**
     * <code>uint64 lowbits = 2;</code>
     * @return The lowbits.
     */
    long getLowbits();
  }
  /**
   * <pre>
   * Named this way to avoid collision with julia's Core.{U,}Int128.
   * </pre>
   *
   * Protobuf type {@code relationalai.protocol.RelInt128}
   */
  public static final class RelInt128 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.RelInt128)
      RelInt128OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RelInt128.newBuilder() to construct.
    private RelInt128(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RelInt128() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RelInt128();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RelInt128(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              highbits_ = input.readUInt64();
              break;
            }
            case 16: {

              lowbits_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelInt128_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelInt128_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.RelInt128.class, relationalai.protocol.Schema.RelInt128.Builder.class);
    }

    public static final int HIGHBITS_FIELD_NUMBER = 1;
    private long highbits_;
    /**
     * <code>uint64 highbits = 1;</code>
     * @return The highbits.
     */
    @java.lang.Override
    public long getHighbits() {
      return highbits_;
    }

    public static final int LOWBITS_FIELD_NUMBER = 2;
    private long lowbits_;
    /**
     * <code>uint64 lowbits = 2;</code>
     * @return The lowbits.
     */
    @java.lang.Override
    public long getLowbits() {
      return lowbits_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (highbits_ != 0L) {
        output.writeUInt64(1, highbits_);
      }
      if (lowbits_ != 0L) {
        output.writeUInt64(2, lowbits_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (highbits_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, highbits_);
      }
      if (lowbits_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, lowbits_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.RelInt128)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.RelInt128 other = (relationalai.protocol.Schema.RelInt128) obj;

      if (getHighbits()
          != other.getHighbits()) return false;
      if (getLowbits()
          != other.getLowbits()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HIGHBITS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getHighbits());
      hash = (37 * hash) + LOWBITS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLowbits());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelInt128 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelInt128 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelInt128 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.RelInt128 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Named this way to avoid collision with julia's Core.{U,}Int128.
     * </pre>
     *
     * Protobuf type {@code relationalai.protocol.RelInt128}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.RelInt128)
        relationalai.protocol.Schema.RelInt128OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelInt128_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelInt128_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.RelInt128.class, relationalai.protocol.Schema.RelInt128.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.RelInt128.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        highbits_ = 0L;

        lowbits_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelInt128_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelInt128 getDefaultInstanceForType() {
        return relationalai.protocol.Schema.RelInt128.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelInt128 build() {
        relationalai.protocol.Schema.RelInt128 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelInt128 buildPartial() {
        relationalai.protocol.Schema.RelInt128 result = new relationalai.protocol.Schema.RelInt128(this);
        result.highbits_ = highbits_;
        result.lowbits_ = lowbits_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.RelInt128) {
          return mergeFrom((relationalai.protocol.Schema.RelInt128)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.RelInt128 other) {
        if (other == relationalai.protocol.Schema.RelInt128.getDefaultInstance()) return this;
        if (other.getHighbits() != 0L) {
          setHighbits(other.getHighbits());
        }
        if (other.getLowbits() != 0L) {
          setLowbits(other.getLowbits());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.RelInt128 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.RelInt128) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long highbits_ ;
      /**
       * <code>uint64 highbits = 1;</code>
       * @return The highbits.
       */
      @java.lang.Override
      public long getHighbits() {
        return highbits_;
      }
      /**
       * <code>uint64 highbits = 1;</code>
       * @param value The highbits to set.
       * @return This builder for chaining.
       */
      public Builder setHighbits(long value) {
        
        highbits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 highbits = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHighbits() {
        
        highbits_ = 0L;
        onChanged();
        return this;
      }

      private long lowbits_ ;
      /**
       * <code>uint64 lowbits = 2;</code>
       * @return The lowbits.
       */
      @java.lang.Override
      public long getLowbits() {
        return lowbits_;
      }
      /**
       * <code>uint64 lowbits = 2;</code>
       * @param value The lowbits to set.
       * @return This builder for chaining.
       */
      public Builder setLowbits(long value) {
        
        lowbits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 lowbits = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLowbits() {
        
        lowbits_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.RelInt128)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.RelInt128)
    private static final relationalai.protocol.Schema.RelInt128 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.RelInt128();
    }

    public static relationalai.protocol.Schema.RelInt128 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RelInt128>
        PARSER = new com.google.protobuf.AbstractParser<RelInt128>() {
      @java.lang.Override
      public RelInt128 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RelInt128(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RelInt128> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RelInt128> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.RelInt128 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RelUInt128OrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.RelUInt128)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 highbits = 1;</code>
     * @return The highbits.
     */
    long getHighbits();

    /**
     * <code>uint64 lowbits = 2;</code>
     * @return The lowbits.
     */
    long getLowbits();
  }
  /**
   * Protobuf type {@code relationalai.protocol.RelUInt128}
   */
  public static final class RelUInt128 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.RelUInt128)
      RelUInt128OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RelUInt128.newBuilder() to construct.
    private RelUInt128(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RelUInt128() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RelUInt128();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RelUInt128(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              highbits_ = input.readUInt64();
              break;
            }
            case 16: {

              lowbits_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelUInt128_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelUInt128_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.RelUInt128.class, relationalai.protocol.Schema.RelUInt128.Builder.class);
    }

    public static final int HIGHBITS_FIELD_NUMBER = 1;
    private long highbits_;
    /**
     * <code>uint64 highbits = 1;</code>
     * @return The highbits.
     */
    @java.lang.Override
    public long getHighbits() {
      return highbits_;
    }

    public static final int LOWBITS_FIELD_NUMBER = 2;
    private long lowbits_;
    /**
     * <code>uint64 lowbits = 2;</code>
     * @return The lowbits.
     */
    @java.lang.Override
    public long getLowbits() {
      return lowbits_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (highbits_ != 0L) {
        output.writeUInt64(1, highbits_);
      }
      if (lowbits_ != 0L) {
        output.writeUInt64(2, lowbits_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (highbits_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, highbits_);
      }
      if (lowbits_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, lowbits_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.RelUInt128)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.RelUInt128 other = (relationalai.protocol.Schema.RelUInt128) obj;

      if (getHighbits()
          != other.getHighbits()) return false;
      if (getLowbits()
          != other.getLowbits()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HIGHBITS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getHighbits());
      hash = (37 * hash) + LOWBITS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLowbits());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelUInt128 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.RelUInt128 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code relationalai.protocol.RelUInt128}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.RelUInt128)
        relationalai.protocol.Schema.RelUInt128OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelUInt128_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelUInt128_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.RelUInt128.class, relationalai.protocol.Schema.RelUInt128.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.RelUInt128.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        highbits_ = 0L;

        lowbits_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelUInt128_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelUInt128 getDefaultInstanceForType() {
        return relationalai.protocol.Schema.RelUInt128.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelUInt128 build() {
        relationalai.protocol.Schema.RelUInt128 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelUInt128 buildPartial() {
        relationalai.protocol.Schema.RelUInt128 result = new relationalai.protocol.Schema.RelUInt128(this);
        result.highbits_ = highbits_;
        result.lowbits_ = lowbits_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.RelUInt128) {
          return mergeFrom((relationalai.protocol.Schema.RelUInt128)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.RelUInt128 other) {
        if (other == relationalai.protocol.Schema.RelUInt128.getDefaultInstance()) return this;
        if (other.getHighbits() != 0L) {
          setHighbits(other.getHighbits());
        }
        if (other.getLowbits() != 0L) {
          setLowbits(other.getLowbits());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.RelUInt128 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.RelUInt128) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long highbits_ ;
      /**
       * <code>uint64 highbits = 1;</code>
       * @return The highbits.
       */
      @java.lang.Override
      public long getHighbits() {
        return highbits_;
      }
      /**
       * <code>uint64 highbits = 1;</code>
       * @param value The highbits to set.
       * @return This builder for chaining.
       */
      public Builder setHighbits(long value) {
        
        highbits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 highbits = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHighbits() {
        
        highbits_ = 0L;
        onChanged();
        return this;
      }

      private long lowbits_ ;
      /**
       * <code>uint64 lowbits = 2;</code>
       * @return The lowbits.
       */
      @java.lang.Override
      public long getLowbits() {
        return lowbits_;
      }
      /**
       * <code>uint64 lowbits = 2;</code>
       * @param value The lowbits to set.
       * @return This builder for chaining.
       */
      public Builder setLowbits(long value) {
        
        lowbits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 lowbits = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLowbits() {
        
        lowbits_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.RelUInt128)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.RelUInt128)
    private static final relationalai.protocol.Schema.RelUInt128 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.RelUInt128();
    }

    public static relationalai.protocol.Schema.RelUInt128 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RelUInt128>
        PARSER = new com.google.protobuf.AbstractParser<RelUInt128>() {
      @java.lang.Override
      public RelUInt128 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RelUInt128(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RelUInt128> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RelUInt128> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.RelUInt128 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PrimitiveValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.PrimitiveValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type tag indicates which value field is set
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
     * @return The enum numeric value on the wire for tag.
     */
    int getTagValue();
    /**
     * <pre>
     * Type tag indicates which value field is set
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
     * @return The tag.
     */
    relationalai.protocol.Schema.PrimitiveType getTag();

    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
     * @return Whether the int128Val field is set.
     */
    boolean hasInt128Val();
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
     * @return The int128Val.
     */
    relationalai.protocol.Schema.RelInt128 getInt128Val();
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
     */
    relationalai.protocol.Schema.RelInt128OrBuilder getInt128ValOrBuilder();

    /**
     * <code>int64 int64_val = 3;</code>
     * @return Whether the int64Val field is set.
     */
    boolean hasInt64Val();
    /**
     * <code>int64 int64_val = 3;</code>
     * @return The int64Val.
     */
    long getInt64Val();

    /**
     * <code>int32 int32_val = 4;</code>
     * @return Whether the int32Val field is set.
     */
    boolean hasInt32Val();
    /**
     * <code>int32 int32_val = 4;</code>
     * @return The int32Val.
     */
    int getInt32Val();

    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int16_val = 5;</code>
     * @return Whether the int16Val field is set.
     */
    boolean hasInt16Val();
    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int16_val = 5;</code>
     * @return The int16Val.
     */
    int getInt16Val();

    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int8_val = 6;</code>
     * @return Whether the int8Val field is set.
     */
    boolean hasInt8Val();
    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int8_val = 6;</code>
     * @return The int8Val.
     */
    int getInt8Val();

    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
     * @return Whether the uint128Val field is set.
     */
    boolean hasUint128Val();
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
     * @return The uint128Val.
     */
    relationalai.protocol.Schema.RelUInt128 getUint128Val();
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
     */
    relationalai.protocol.Schema.RelUInt128OrBuilder getUint128ValOrBuilder();

    /**
     * <code>uint64 uint64_val = 8;</code>
     * @return Whether the uint64Val field is set.
     */
    boolean hasUint64Val();
    /**
     * <code>uint64 uint64_val = 8;</code>
     * @return The uint64Val.
     */
    long getUint64Val();

    /**
     * <code>uint32 uint32_val = 9;</code>
     * @return Whether the uint32Val field is set.
     */
    boolean hasUint32Val();
    /**
     * <code>uint32 uint32_val = 9;</code>
     * @return The uint32Val.
     */
    int getUint32Val();

    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint16_val = 10;</code>
     * @return Whether the uint16Val field is set.
     */
    boolean hasUint16Val();
    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint16_val = 10;</code>
     * @return The uint16Val.
     */
    int getUint16Val();

    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint8_val = 11;</code>
     * @return Whether the uint8Val field is set.
     */
    boolean hasUint8Val();
    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint8_val = 11;</code>
     * @return The uint8Val.
     */
    int getUint8Val();

    /**
     * <code>double float64_val = 12;</code>
     * @return Whether the float64Val field is set.
     */
    boolean hasFloat64Val();
    /**
     * <code>double float64_val = 12;</code>
     * @return The float64Val.
     */
    double getFloat64Val();

    /**
     * <code>float float32_val = 13;</code>
     * @return Whether the float32Val field is set.
     */
    boolean hasFloat32Val();
    /**
     * <code>float float32_val = 13;</code>
     * @return The float32Val.
     */
    float getFloat32Val();

    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>float float16_val = 14;</code>
     * @return Whether the float16Val field is set.
     */
    boolean hasFloat16Val();
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>float float16_val = 14;</code>
     * @return The float16Val.
     */
    float getFloat16Val();

    /**
     * <code>uint32 char_val = 15;</code>
     * @return Whether the charVal field is set.
     */
    boolean hasCharVal();
    /**
     * <code>uint32 char_val = 15;</code>
     * @return The charVal.
     */
    int getCharVal();

    /**
     * <code>bool bool_val = 16;</code>
     * @return Whether the boolVal field is set.
     */
    boolean hasBoolVal();
    /**
     * <code>bool bool_val = 16;</code>
     * @return The boolVal.
     */
    boolean getBoolVal();

    /**
     * <pre>
     * We use bytes for strings because proto has an encoding
     * requirement for the proto3::string type.
     * </pre>
     *
     * <code>bytes string_val = 17;</code>
     * @return Whether the stringVal field is set.
     */
    boolean hasStringVal();
    /**
     * <pre>
     * We use bytes for strings because proto has an encoding
     * requirement for the proto3::string type.
     * </pre>
     *
     * <code>bytes string_val = 17;</code>
     * @return The stringVal.
     */
    com.google.protobuf.ByteString getStringVal();

    public relationalai.protocol.Schema.PrimitiveValue.ValueCase getValueCase();
  }
  /**
   * <pre>
   * next available: 18
   * </pre>
   *
   * Protobuf type {@code relationalai.protocol.PrimitiveValue}
   */
  public static final class PrimitiveValue extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.PrimitiveValue)
      PrimitiveValueOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PrimitiveValue.newBuilder() to construct.
    private PrimitiveValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PrimitiveValue() {
      tag_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PrimitiveValue();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PrimitiveValue(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              tag_ = rawValue;
              break;
            }
            case 18: {
              relationalai.protocol.Schema.RelInt128.Builder subBuilder = null;
              if (valueCase_ == 2) {
                subBuilder = ((relationalai.protocol.Schema.RelInt128) value_).toBuilder();
              }
              value_ =
                  input.readMessage(relationalai.protocol.Schema.RelInt128.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((relationalai.protocol.Schema.RelInt128) value_);
                value_ = subBuilder.buildPartial();
              }
              valueCase_ = 2;
              break;
            }
            case 24: {
              value_ = input.readInt64();
              valueCase_ = 3;
              break;
            }
            case 32: {
              value_ = input.readInt32();
              valueCase_ = 4;
              break;
            }
            case 40: {
              value_ = input.readInt32();
              valueCase_ = 5;
              break;
            }
            case 48: {
              value_ = input.readInt32();
              valueCase_ = 6;
              break;
            }
            case 58: {
              relationalai.protocol.Schema.RelUInt128.Builder subBuilder = null;
              if (valueCase_ == 7) {
                subBuilder = ((relationalai.protocol.Schema.RelUInt128) value_).toBuilder();
              }
              value_ =
                  input.readMessage(relationalai.protocol.Schema.RelUInt128.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((relationalai.protocol.Schema.RelUInt128) value_);
                value_ = subBuilder.buildPartial();
              }
              valueCase_ = 7;
              break;
            }
            case 64: {
              value_ = input.readUInt64();
              valueCase_ = 8;
              break;
            }
            case 72: {
              value_ = input.readUInt32();
              valueCase_ = 9;
              break;
            }
            case 80: {
              value_ = input.readUInt32();
              valueCase_ = 10;
              break;
            }
            case 88: {
              value_ = input.readUInt32();
              valueCase_ = 11;
              break;
            }
            case 97: {
              value_ = input.readDouble();
              valueCase_ = 12;
              break;
            }
            case 109: {
              value_ = input.readFloat();
              valueCase_ = 13;
              break;
            }
            case 117: {
              value_ = input.readFloat();
              valueCase_ = 14;
              break;
            }
            case 120: {
              value_ = input.readUInt32();
              valueCase_ = 15;
              break;
            }
            case 128: {
              value_ = input.readBool();
              valueCase_ = 16;
              break;
            }
            case 138: {
              value_ = input.readBytes();
              valueCase_ = 17;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_PrimitiveValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_PrimitiveValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.PrimitiveValue.class, relationalai.protocol.Schema.PrimitiveValue.Builder.class);
    }

    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      INT128_VAL(2),
      INT64_VAL(3),
      INT32_VAL(4),
      INT16_VAL(5),
      INT8_VAL(6),
      UINT128_VAL(7),
      UINT64_VAL(8),
      UINT32_VAL(9),
      UINT16_VAL(10),
      UINT8_VAL(11),
      FLOAT64_VAL(12),
      FLOAT32_VAL(13),
      FLOAT16_VAL(14),
      CHAR_VAL(15),
      BOOL_VAL(16),
      STRING_VAL(17),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 2: return INT128_VAL;
          case 3: return INT64_VAL;
          case 4: return INT32_VAL;
          case 5: return INT16_VAL;
          case 6: return INT8_VAL;
          case 7: return UINT128_VAL;
          case 8: return UINT64_VAL;
          case 9: return UINT32_VAL;
          case 10: return UINT16_VAL;
          case 11: return UINT8_VAL;
          case 12: return FLOAT64_VAL;
          case 13: return FLOAT32_VAL;
          case 14: return FLOAT16_VAL;
          case 15: return CHAR_VAL;
          case 16: return BOOL_VAL;
          case 17: return STRING_VAL;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int TAG_FIELD_NUMBER = 1;
    private int tag_;
    /**
     * <pre>
     * Type tag indicates which value field is set
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
     * @return The enum numeric value on the wire for tag.
     */
    @java.lang.Override public int getTagValue() {
      return tag_;
    }
    /**
     * <pre>
     * Type tag indicates which value field is set
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
     * @return The tag.
     */
    @java.lang.Override public relationalai.protocol.Schema.PrimitiveType getTag() {
      @SuppressWarnings("deprecation")
      relationalai.protocol.Schema.PrimitiveType result = relationalai.protocol.Schema.PrimitiveType.valueOf(tag_);
      return result == null ? relationalai.protocol.Schema.PrimitiveType.UNRECOGNIZED : result;
    }

    public static final int INT128_VAL_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
     * @return Whether the int128Val field is set.
     */
    @java.lang.Override
    public boolean hasInt128Val() {
      return valueCase_ == 2;
    }
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
     * @return The int128Val.
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelInt128 getInt128Val() {
      if (valueCase_ == 2) {
         return (relationalai.protocol.Schema.RelInt128) value_;
      }
      return relationalai.protocol.Schema.RelInt128.getDefaultInstance();
    }
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelInt128OrBuilder getInt128ValOrBuilder() {
      if (valueCase_ == 2) {
         return (relationalai.protocol.Schema.RelInt128) value_;
      }
      return relationalai.protocol.Schema.RelInt128.getDefaultInstance();
    }

    public static final int INT64_VAL_FIELD_NUMBER = 3;
    /**
     * <code>int64 int64_val = 3;</code>
     * @return Whether the int64Val field is set.
     */
    @java.lang.Override
    public boolean hasInt64Val() {
      return valueCase_ == 3;
    }
    /**
     * <code>int64 int64_val = 3;</code>
     * @return The int64Val.
     */
    @java.lang.Override
    public long getInt64Val() {
      if (valueCase_ == 3) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int INT32_VAL_FIELD_NUMBER = 4;
    /**
     * <code>int32 int32_val = 4;</code>
     * @return Whether the int32Val field is set.
     */
    @java.lang.Override
    public boolean hasInt32Val() {
      return valueCase_ == 4;
    }
    /**
     * <code>int32 int32_val = 4;</code>
     * @return The int32Val.
     */
    @java.lang.Override
    public int getInt32Val() {
      if (valueCase_ == 4) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int INT16_VAL_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int16_val = 5;</code>
     * @return Whether the int16Val field is set.
     */
    @java.lang.Override
    public boolean hasInt16Val() {
      return valueCase_ == 5;
    }
    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int16_val = 5;</code>
     * @return The int16Val.
     */
    @java.lang.Override
    public int getInt16Val() {
      if (valueCase_ == 5) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int INT8_VAL_FIELD_NUMBER = 6;
    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int8_val = 6;</code>
     * @return Whether the int8Val field is set.
     */
    @java.lang.Override
    public boolean hasInt8Val() {
      return valueCase_ == 6;
    }
    /**
     * <pre>
     * Not present in protobuf; int32
     * </pre>
     *
     * <code>int32 int8_val = 6;</code>
     * @return The int8Val.
     */
    @java.lang.Override
    public int getInt8Val() {
      if (valueCase_ == 6) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int UINT128_VAL_FIELD_NUMBER = 7;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
     * @return Whether the uint128Val field is set.
     */
    @java.lang.Override
    public boolean hasUint128Val() {
      return valueCase_ == 7;
    }
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
     * @return The uint128Val.
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelUInt128 getUint128Val() {
      if (valueCase_ == 7) {
         return (relationalai.protocol.Schema.RelUInt128) value_;
      }
      return relationalai.protocol.Schema.RelUInt128.getDefaultInstance();
    }
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelUInt128OrBuilder getUint128ValOrBuilder() {
      if (valueCase_ == 7) {
         return (relationalai.protocol.Schema.RelUInt128) value_;
      }
      return relationalai.protocol.Schema.RelUInt128.getDefaultInstance();
    }

    public static final int UINT64_VAL_FIELD_NUMBER = 8;
    /**
     * <code>uint64 uint64_val = 8;</code>
     * @return Whether the uint64Val field is set.
     */
    @java.lang.Override
    public boolean hasUint64Val() {
      return valueCase_ == 8;
    }
    /**
     * <code>uint64 uint64_val = 8;</code>
     * @return The uint64Val.
     */
    @java.lang.Override
    public long getUint64Val() {
      if (valueCase_ == 8) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int UINT32_VAL_FIELD_NUMBER = 9;
    /**
     * <code>uint32 uint32_val = 9;</code>
     * @return Whether the uint32Val field is set.
     */
    @java.lang.Override
    public boolean hasUint32Val() {
      return valueCase_ == 9;
    }
    /**
     * <code>uint32 uint32_val = 9;</code>
     * @return The uint32Val.
     */
    @java.lang.Override
    public int getUint32Val() {
      if (valueCase_ == 9) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int UINT16_VAL_FIELD_NUMBER = 10;
    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint16_val = 10;</code>
     * @return Whether the uint16Val field is set.
     */
    @java.lang.Override
    public boolean hasUint16Val() {
      return valueCase_ == 10;
    }
    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint16_val = 10;</code>
     * @return The uint16Val.
     */
    @java.lang.Override
    public int getUint16Val() {
      if (valueCase_ == 10) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int UINT8_VAL_FIELD_NUMBER = 11;
    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint8_val = 11;</code>
     * @return Whether the uint8Val field is set.
     */
    @java.lang.Override
    public boolean hasUint8Val() {
      return valueCase_ == 11;
    }
    /**
     * <pre>
     * Not present in protobuf; uint32
     * </pre>
     *
     * <code>uint32 uint8_val = 11;</code>
     * @return The uint8Val.
     */
    @java.lang.Override
    public int getUint8Val() {
      if (valueCase_ == 11) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int FLOAT64_VAL_FIELD_NUMBER = 12;
    /**
     * <code>double float64_val = 12;</code>
     * @return Whether the float64Val field is set.
     */
    @java.lang.Override
    public boolean hasFloat64Val() {
      return valueCase_ == 12;
    }
    /**
     * <code>double float64_val = 12;</code>
     * @return The float64Val.
     */
    @java.lang.Override
    public double getFloat64Val() {
      if (valueCase_ == 12) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int FLOAT32_VAL_FIELD_NUMBER = 13;
    /**
     * <code>float float32_val = 13;</code>
     * @return Whether the float32Val field is set.
     */
    @java.lang.Override
    public boolean hasFloat32Val() {
      return valueCase_ == 13;
    }
    /**
     * <code>float float32_val = 13;</code>
     * @return The float32Val.
     */
    @java.lang.Override
    public float getFloat32Val() {
      if (valueCase_ == 13) {
        return (java.lang.Float) value_;
      }
      return 0F;
    }

    public static final int FLOAT16_VAL_FIELD_NUMBER = 14;
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>float float16_val = 14;</code>
     * @return Whether the float16Val field is set.
     */
    @java.lang.Override
    public boolean hasFloat16Val() {
      return valueCase_ == 14;
    }
    /**
     * <pre>
     * Not present in protobuf
     * </pre>
     *
     * <code>float float16_val = 14;</code>
     * @return The float16Val.
     */
    @java.lang.Override
    public float getFloat16Val() {
      if (valueCase_ == 14) {
        return (java.lang.Float) value_;
      }
      return 0F;
    }

    public static final int CHAR_VAL_FIELD_NUMBER = 15;
    /**
     * <code>uint32 char_val = 15;</code>
     * @return Whether the charVal field is set.
     */
    @java.lang.Override
    public boolean hasCharVal() {
      return valueCase_ == 15;
    }
    /**
     * <code>uint32 char_val = 15;</code>
     * @return The charVal.
     */
    @java.lang.Override
    public int getCharVal() {
      if (valueCase_ == 15) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int BOOL_VAL_FIELD_NUMBER = 16;
    /**
     * <code>bool bool_val = 16;</code>
     * @return Whether the boolVal field is set.
     */
    @java.lang.Override
    public boolean hasBoolVal() {
      return valueCase_ == 16;
    }
    /**
     * <code>bool bool_val = 16;</code>
     * @return The boolVal.
     */
    @java.lang.Override
    public boolean getBoolVal() {
      if (valueCase_ == 16) {
        return (java.lang.Boolean) value_;
      }
      return false;
    }

    public static final int STRING_VAL_FIELD_NUMBER = 17;
    /**
     * <pre>
     * We use bytes for strings because proto has an encoding
     * requirement for the proto3::string type.
     * </pre>
     *
     * <code>bytes string_val = 17;</code>
     * @return Whether the stringVal field is set.
     */
    @java.lang.Override
    public boolean hasStringVal() {
      return valueCase_ == 17;
    }
    /**
     * <pre>
     * We use bytes for strings because proto has an encoding
     * requirement for the proto3::string type.
     * </pre>
     *
     * <code>bytes string_val = 17;</code>
     * @return The stringVal.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getStringVal() {
      if (valueCase_ == 17) {
        return (com.google.protobuf.ByteString) value_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (tag_ != relationalai.protocol.Schema.PrimitiveType.UNSPECIFIED_TYPE.getNumber()) {
        output.writeEnum(1, tag_);
      }
      if (valueCase_ == 2) {
        output.writeMessage(2, (relationalai.protocol.Schema.RelInt128) value_);
      }
      if (valueCase_ == 3) {
        output.writeInt64(
            3, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 4) {
        output.writeInt32(
            4, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 5) {
        output.writeInt32(
            5, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 6) {
        output.writeInt32(
            6, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 7) {
        output.writeMessage(7, (relationalai.protocol.Schema.RelUInt128) value_);
      }
      if (valueCase_ == 8) {
        output.writeUInt64(
            8, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 9) {
        output.writeUInt32(
            9, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 10) {
        output.writeUInt32(
            10, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 11) {
        output.writeUInt32(
            11, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 12) {
        output.writeDouble(
            12, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 13) {
        output.writeFloat(
            13, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 14) {
        output.writeFloat(
            14, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 15) {
        output.writeUInt32(
            15, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 16) {
        output.writeBool(
            16, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 17) {
        output.writeBytes(
            17, (com.google.protobuf.ByteString) value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (tag_ != relationalai.protocol.Schema.PrimitiveType.UNSPECIFIED_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, tag_);
      }
      if (valueCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (relationalai.protocol.Schema.RelInt128) value_);
      }
      if (valueCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              3, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              4, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              5, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              6, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (relationalai.protocol.Schema.RelUInt128) value_);
      }
      if (valueCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              8, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              9, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              10, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              11, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 12) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              12, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 13) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(
              13, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 14) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(
              14, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 15) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              15, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 16) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              16, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 17) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              17, (com.google.protobuf.ByteString) value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.PrimitiveValue)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.PrimitiveValue other = (relationalai.protocol.Schema.PrimitiveValue) obj;

      if (tag_ != other.tag_) return false;
      if (!getValueCase().equals(other.getValueCase())) return false;
      switch (valueCase_) {
        case 2:
          if (!getInt128Val()
              .equals(other.getInt128Val())) return false;
          break;
        case 3:
          if (getInt64Val()
              != other.getInt64Val()) return false;
          break;
        case 4:
          if (getInt32Val()
              != other.getInt32Val()) return false;
          break;
        case 5:
          if (getInt16Val()
              != other.getInt16Val()) return false;
          break;
        case 6:
          if (getInt8Val()
              != other.getInt8Val()) return false;
          break;
        case 7:
          if (!getUint128Val()
              .equals(other.getUint128Val())) return false;
          break;
        case 8:
          if (getUint64Val()
              != other.getUint64Val()) return false;
          break;
        case 9:
          if (getUint32Val()
              != other.getUint32Val()) return false;
          break;
        case 10:
          if (getUint16Val()
              != other.getUint16Val()) return false;
          break;
        case 11:
          if (getUint8Val()
              != other.getUint8Val()) return false;
          break;
        case 12:
          if (java.lang.Double.doubleToLongBits(getFloat64Val())
              != java.lang.Double.doubleToLongBits(
                  other.getFloat64Val())) return false;
          break;
        case 13:
          if (java.lang.Float.floatToIntBits(getFloat32Val())
              != java.lang.Float.floatToIntBits(
                  other.getFloat32Val())) return false;
          break;
        case 14:
          if (java.lang.Float.floatToIntBits(getFloat16Val())
              != java.lang.Float.floatToIntBits(
                  other.getFloat16Val())) return false;
          break;
        case 15:
          if (getCharVal()
              != other.getCharVal()) return false;
          break;
        case 16:
          if (getBoolVal()
              != other.getBoolVal()) return false;
          break;
        case 17:
          if (!getStringVal()
              .equals(other.getStringVal())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TAG_FIELD_NUMBER;
      hash = (53 * hash) + tag_;
      switch (valueCase_) {
        case 2:
          hash = (37 * hash) + INT128_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getInt128Val().hashCode();
          break;
        case 3:
          hash = (37 * hash) + INT64_VAL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getInt64Val());
          break;
        case 4:
          hash = (37 * hash) + INT32_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getInt32Val();
          break;
        case 5:
          hash = (37 * hash) + INT16_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getInt16Val();
          break;
        case 6:
          hash = (37 * hash) + INT8_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getInt8Val();
          break;
        case 7:
          hash = (37 * hash) + UINT128_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getUint128Val().hashCode();
          break;
        case 8:
          hash = (37 * hash) + UINT64_VAL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getUint64Val());
          break;
        case 9:
          hash = (37 * hash) + UINT32_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getUint32Val();
          break;
        case 10:
          hash = (37 * hash) + UINT16_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getUint16Val();
          break;
        case 11:
          hash = (37 * hash) + UINT8_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getUint8Val();
          break;
        case 12:
          hash = (37 * hash) + FLOAT64_VAL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getFloat64Val()));
          break;
        case 13:
          hash = (37 * hash) + FLOAT32_VAL_FIELD_NUMBER;
          hash = (53 * hash) + java.lang.Float.floatToIntBits(
              getFloat32Val());
          break;
        case 14:
          hash = (37 * hash) + FLOAT16_VAL_FIELD_NUMBER;
          hash = (53 * hash) + java.lang.Float.floatToIntBits(
              getFloat16Val());
          break;
        case 15:
          hash = (37 * hash) + CHAR_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getCharVal();
          break;
        case 16:
          hash = (37 * hash) + BOOL_VAL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getBoolVal());
          break;
        case 17:
          hash = (37 * hash) + STRING_VAL_FIELD_NUMBER;
          hash = (53 * hash) + getStringVal().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.PrimitiveValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.PrimitiveValue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * next available: 18
     * </pre>
     *
     * Protobuf type {@code relationalai.protocol.PrimitiveValue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.PrimitiveValue)
        relationalai.protocol.Schema.PrimitiveValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_PrimitiveValue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_PrimitiveValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.PrimitiveValue.class, relationalai.protocol.Schema.PrimitiveValue.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.PrimitiveValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        tag_ = 0;

        valueCase_ = 0;
        value_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_PrimitiveValue_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.PrimitiveValue getDefaultInstanceForType() {
        return relationalai.protocol.Schema.PrimitiveValue.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.PrimitiveValue build() {
        relationalai.protocol.Schema.PrimitiveValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.PrimitiveValue buildPartial() {
        relationalai.protocol.Schema.PrimitiveValue result = new relationalai.protocol.Schema.PrimitiveValue(this);
        result.tag_ = tag_;
        if (valueCase_ == 2) {
          if (int128ValBuilder_ == null) {
            result.value_ = value_;
          } else {
            result.value_ = int128ValBuilder_.build();
          }
        }
        if (valueCase_ == 3) {
          result.value_ = value_;
        }
        if (valueCase_ == 4) {
          result.value_ = value_;
        }
        if (valueCase_ == 5) {
          result.value_ = value_;
        }
        if (valueCase_ == 6) {
          result.value_ = value_;
        }
        if (valueCase_ == 7) {
          if (uint128ValBuilder_ == null) {
            result.value_ = value_;
          } else {
            result.value_ = uint128ValBuilder_.build();
          }
        }
        if (valueCase_ == 8) {
          result.value_ = value_;
        }
        if (valueCase_ == 9) {
          result.value_ = value_;
        }
        if (valueCase_ == 10) {
          result.value_ = value_;
        }
        if (valueCase_ == 11) {
          result.value_ = value_;
        }
        if (valueCase_ == 12) {
          result.value_ = value_;
        }
        if (valueCase_ == 13) {
          result.value_ = value_;
        }
        if (valueCase_ == 14) {
          result.value_ = value_;
        }
        if (valueCase_ == 15) {
          result.value_ = value_;
        }
        if (valueCase_ == 16) {
          result.value_ = value_;
        }
        if (valueCase_ == 17) {
          result.value_ = value_;
        }
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.PrimitiveValue) {
          return mergeFrom((relationalai.protocol.Schema.PrimitiveValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.PrimitiveValue other) {
        if (other == relationalai.protocol.Schema.PrimitiveValue.getDefaultInstance()) return this;
        if (other.tag_ != 0) {
          setTagValue(other.getTagValue());
        }
        switch (other.getValueCase()) {
          case INT128_VAL: {
            mergeInt128Val(other.getInt128Val());
            break;
          }
          case INT64_VAL: {
            setInt64Val(other.getInt64Val());
            break;
          }
          case INT32_VAL: {
            setInt32Val(other.getInt32Val());
            break;
          }
          case INT16_VAL: {
            setInt16Val(other.getInt16Val());
            break;
          }
          case INT8_VAL: {
            setInt8Val(other.getInt8Val());
            break;
          }
          case UINT128_VAL: {
            mergeUint128Val(other.getUint128Val());
            break;
          }
          case UINT64_VAL: {
            setUint64Val(other.getUint64Val());
            break;
          }
          case UINT32_VAL: {
            setUint32Val(other.getUint32Val());
            break;
          }
          case UINT16_VAL: {
            setUint16Val(other.getUint16Val());
            break;
          }
          case UINT8_VAL: {
            setUint8Val(other.getUint8Val());
            break;
          }
          case FLOAT64_VAL: {
            setFloat64Val(other.getFloat64Val());
            break;
          }
          case FLOAT32_VAL: {
            setFloat32Val(other.getFloat32Val());
            break;
          }
          case FLOAT16_VAL: {
            setFloat16Val(other.getFloat16Val());
            break;
          }
          case CHAR_VAL: {
            setCharVal(other.getCharVal());
            break;
          }
          case BOOL_VAL: {
            setBoolVal(other.getBoolVal());
            break;
          }
          case STRING_VAL: {
            setStringVal(other.getStringVal());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.PrimitiveValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.PrimitiveValue) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }


      private int tag_ = 0;
      /**
       * <pre>
       * Type tag indicates which value field is set
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
       * @return The enum numeric value on the wire for tag.
       */
      @java.lang.Override public int getTagValue() {
        return tag_;
      }
      /**
       * <pre>
       * Type tag indicates which value field is set
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
       * @param value The enum numeric value on the wire for tag to set.
       * @return This builder for chaining.
       */
      public Builder setTagValue(int value) {
        
        tag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type tag indicates which value field is set
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
       * @return The tag.
       */
      @java.lang.Override
      public relationalai.protocol.Schema.PrimitiveType getTag() {
        @SuppressWarnings("deprecation")
        relationalai.protocol.Schema.PrimitiveType result = relationalai.protocol.Schema.PrimitiveType.valueOf(tag_);
        return result == null ? relationalai.protocol.Schema.PrimitiveType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type tag indicates which value field is set
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
       * @param value The tag to set.
       * @return This builder for chaining.
       */
      public Builder setTag(relationalai.protocol.Schema.PrimitiveType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        tag_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type tag indicates which value field is set
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType tag = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTag() {
        
        tag_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelInt128, relationalai.protocol.Schema.RelInt128.Builder, relationalai.protocol.Schema.RelInt128OrBuilder> int128ValBuilder_;
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       * @return Whether the int128Val field is set.
       */
      @java.lang.Override
      public boolean hasInt128Val() {
        return valueCase_ == 2;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       * @return The int128Val.
       */
      @java.lang.Override
      public relationalai.protocol.Schema.RelInt128 getInt128Val() {
        if (int128ValBuilder_ == null) {
          if (valueCase_ == 2) {
            return (relationalai.protocol.Schema.RelInt128) value_;
          }
          return relationalai.protocol.Schema.RelInt128.getDefaultInstance();
        } else {
          if (valueCase_ == 2) {
            return int128ValBuilder_.getMessage();
          }
          return relationalai.protocol.Schema.RelInt128.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       */
      public Builder setInt128Val(relationalai.protocol.Schema.RelInt128 value) {
        if (int128ValBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          int128ValBuilder_.setMessage(value);
        }
        valueCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       */
      public Builder setInt128Val(
          relationalai.protocol.Schema.RelInt128.Builder builderForValue) {
        if (int128ValBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          int128ValBuilder_.setMessage(builderForValue.build());
        }
        valueCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       */
      public Builder mergeInt128Val(relationalai.protocol.Schema.RelInt128 value) {
        if (int128ValBuilder_ == null) {
          if (valueCase_ == 2 &&
              value_ != relationalai.protocol.Schema.RelInt128.getDefaultInstance()) {
            value_ = relationalai.protocol.Schema.RelInt128.newBuilder((relationalai.protocol.Schema.RelInt128) value_)
                .mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          if (valueCase_ == 2) {
            int128ValBuilder_.mergeFrom(value);
          } else {
            int128ValBuilder_.setMessage(value);
          }
        }
        valueCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       */
      public Builder clearInt128Val() {
        if (int128ValBuilder_ == null) {
          if (valueCase_ == 2) {
            valueCase_ = 0;
            value_ = null;
            onChanged();
          }
        } else {
          if (valueCase_ == 2) {
            valueCase_ = 0;
            value_ = null;
          }
          int128ValBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       */
      public relationalai.protocol.Schema.RelInt128.Builder getInt128ValBuilder() {
        return getInt128ValFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       */
      @java.lang.Override
      public relationalai.protocol.Schema.RelInt128OrBuilder getInt128ValOrBuilder() {
        if ((valueCase_ == 2) && (int128ValBuilder_ != null)) {
          return int128ValBuilder_.getMessageOrBuilder();
        } else {
          if (valueCase_ == 2) {
            return (relationalai.protocol.Schema.RelInt128) value_;
          }
          return relationalai.protocol.Schema.RelInt128.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelInt128 int128_val = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelInt128, relationalai.protocol.Schema.RelInt128.Builder, relationalai.protocol.Schema.RelInt128OrBuilder> 
          getInt128ValFieldBuilder() {
        if (int128ValBuilder_ == null) {
          if (!(valueCase_ == 2)) {
            value_ = relationalai.protocol.Schema.RelInt128.getDefaultInstance();
          }
          int128ValBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              relationalai.protocol.Schema.RelInt128, relationalai.protocol.Schema.RelInt128.Builder, relationalai.protocol.Schema.RelInt128OrBuilder>(
                  (relationalai.protocol.Schema.RelInt128) value_,
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        valueCase_ = 2;
        onChanged();;
        return int128ValBuilder_;
      }

      /**
       * <code>int64 int64_val = 3;</code>
       * @return Whether the int64Val field is set.
       */
      public boolean hasInt64Val() {
        return valueCase_ == 3;
      }
      /**
       * <code>int64 int64_val = 3;</code>
       * @return The int64Val.
       */
      public long getInt64Val() {
        if (valueCase_ == 3) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>int64 int64_val = 3;</code>
       * @param value The int64Val to set.
       * @return This builder for chaining.
       */
      public Builder setInt64Val(long value) {
        valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 int64_val = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInt64Val() {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int32 int32_val = 4;</code>
       * @return Whether the int32Val field is set.
       */
      public boolean hasInt32Val() {
        return valueCase_ == 4;
      }
      /**
       * <code>int32 int32_val = 4;</code>
       * @return The int32Val.
       */
      public int getInt32Val() {
        if (valueCase_ == 4) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>int32 int32_val = 4;</code>
       * @param value The int32Val to set.
       * @return This builder for chaining.
       */
      public Builder setInt32Val(int value) {
        valueCase_ = 4;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 int32_val = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearInt32Val() {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int16_val = 5;</code>
       * @return Whether the int16Val field is set.
       */
      public boolean hasInt16Val() {
        return valueCase_ == 5;
      }
      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int16_val = 5;</code>
       * @return The int16Val.
       */
      public int getInt16Val() {
        if (valueCase_ == 5) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int16_val = 5;</code>
       * @param value The int16Val to set.
       * @return This builder for chaining.
       */
      public Builder setInt16Val(int value) {
        valueCase_ = 5;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int16_val = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearInt16Val() {
        if (valueCase_ == 5) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int8_val = 6;</code>
       * @return Whether the int8Val field is set.
       */
      public boolean hasInt8Val() {
        return valueCase_ == 6;
      }
      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int8_val = 6;</code>
       * @return The int8Val.
       */
      public int getInt8Val() {
        if (valueCase_ == 6) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int8_val = 6;</code>
       * @param value The int8Val to set.
       * @return This builder for chaining.
       */
      public Builder setInt8Val(int value) {
        valueCase_ = 6;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf; int32
       * </pre>
       *
       * <code>int32 int8_val = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearInt8Val() {
        if (valueCase_ == 6) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelUInt128, relationalai.protocol.Schema.RelUInt128.Builder, relationalai.protocol.Schema.RelUInt128OrBuilder> uint128ValBuilder_;
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       * @return Whether the uint128Val field is set.
       */
      @java.lang.Override
      public boolean hasUint128Val() {
        return valueCase_ == 7;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       * @return The uint128Val.
       */
      @java.lang.Override
      public relationalai.protocol.Schema.RelUInt128 getUint128Val() {
        if (uint128ValBuilder_ == null) {
          if (valueCase_ == 7) {
            return (relationalai.protocol.Schema.RelUInt128) value_;
          }
          return relationalai.protocol.Schema.RelUInt128.getDefaultInstance();
        } else {
          if (valueCase_ == 7) {
            return uint128ValBuilder_.getMessage();
          }
          return relationalai.protocol.Schema.RelUInt128.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       */
      public Builder setUint128Val(relationalai.protocol.Schema.RelUInt128 value) {
        if (uint128ValBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          uint128ValBuilder_.setMessage(value);
        }
        valueCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       */
      public Builder setUint128Val(
          relationalai.protocol.Schema.RelUInt128.Builder builderForValue) {
        if (uint128ValBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          uint128ValBuilder_.setMessage(builderForValue.build());
        }
        valueCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       */
      public Builder mergeUint128Val(relationalai.protocol.Schema.RelUInt128 value) {
        if (uint128ValBuilder_ == null) {
          if (valueCase_ == 7 &&
              value_ != relationalai.protocol.Schema.RelUInt128.getDefaultInstance()) {
            value_ = relationalai.protocol.Schema.RelUInt128.newBuilder((relationalai.protocol.Schema.RelUInt128) value_)
                .mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          if (valueCase_ == 7) {
            uint128ValBuilder_.mergeFrom(value);
          } else {
            uint128ValBuilder_.setMessage(value);
          }
        }
        valueCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       */
      public Builder clearUint128Val() {
        if (uint128ValBuilder_ == null) {
          if (valueCase_ == 7) {
            valueCase_ = 0;
            value_ = null;
            onChanged();
          }
        } else {
          if (valueCase_ == 7) {
            valueCase_ = 0;
            value_ = null;
          }
          uint128ValBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       */
      public relationalai.protocol.Schema.RelUInt128.Builder getUint128ValBuilder() {
        return getUint128ValFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       */
      @java.lang.Override
      public relationalai.protocol.Schema.RelUInt128OrBuilder getUint128ValOrBuilder() {
        if ((valueCase_ == 7) && (uint128ValBuilder_ != null)) {
          return uint128ValBuilder_.getMessageOrBuilder();
        } else {
          if (valueCase_ == 7) {
            return (relationalai.protocol.Schema.RelUInt128) value_;
          }
          return relationalai.protocol.Schema.RelUInt128.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>.relationalai.protocol.RelUInt128 uint128_val = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelUInt128, relationalai.protocol.Schema.RelUInt128.Builder, relationalai.protocol.Schema.RelUInt128OrBuilder> 
          getUint128ValFieldBuilder() {
        if (uint128ValBuilder_ == null) {
          if (!(valueCase_ == 7)) {
            value_ = relationalai.protocol.Schema.RelUInt128.getDefaultInstance();
          }
          uint128ValBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              relationalai.protocol.Schema.RelUInt128, relationalai.protocol.Schema.RelUInt128.Builder, relationalai.protocol.Schema.RelUInt128OrBuilder>(
                  (relationalai.protocol.Schema.RelUInt128) value_,
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        valueCase_ = 7;
        onChanged();;
        return uint128ValBuilder_;
      }

      /**
       * <code>uint64 uint64_val = 8;</code>
       * @return Whether the uint64Val field is set.
       */
      public boolean hasUint64Val() {
        return valueCase_ == 8;
      }
      /**
       * <code>uint64 uint64_val = 8;</code>
       * @return The uint64Val.
       */
      public long getUint64Val() {
        if (valueCase_ == 8) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>uint64 uint64_val = 8;</code>
       * @param value The uint64Val to set.
       * @return This builder for chaining.
       */
      public Builder setUint64Val(long value) {
        valueCase_ = 8;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 uint64_val = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearUint64Val() {
        if (valueCase_ == 8) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>uint32 uint32_val = 9;</code>
       * @return Whether the uint32Val field is set.
       */
      public boolean hasUint32Val() {
        return valueCase_ == 9;
      }
      /**
       * <code>uint32 uint32_val = 9;</code>
       * @return The uint32Val.
       */
      public int getUint32Val() {
        if (valueCase_ == 9) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>uint32 uint32_val = 9;</code>
       * @param value The uint32Val to set.
       * @return This builder for chaining.
       */
      public Builder setUint32Val(int value) {
        valueCase_ = 9;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 uint32_val = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearUint32Val() {
        if (valueCase_ == 9) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint16_val = 10;</code>
       * @return Whether the uint16Val field is set.
       */
      public boolean hasUint16Val() {
        return valueCase_ == 10;
      }
      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint16_val = 10;</code>
       * @return The uint16Val.
       */
      public int getUint16Val() {
        if (valueCase_ == 10) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint16_val = 10;</code>
       * @param value The uint16Val to set.
       * @return This builder for chaining.
       */
      public Builder setUint16Val(int value) {
        valueCase_ = 10;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint16_val = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearUint16Val() {
        if (valueCase_ == 10) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint8_val = 11;</code>
       * @return Whether the uint8Val field is set.
       */
      public boolean hasUint8Val() {
        return valueCase_ == 11;
      }
      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint8_val = 11;</code>
       * @return The uint8Val.
       */
      public int getUint8Val() {
        if (valueCase_ == 11) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint8_val = 11;</code>
       * @param value The uint8Val to set.
       * @return This builder for chaining.
       */
      public Builder setUint8Val(int value) {
        valueCase_ = 11;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf; uint32
       * </pre>
       *
       * <code>uint32 uint8_val = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearUint8Val() {
        if (valueCase_ == 11) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>double float64_val = 12;</code>
       * @return Whether the float64Val field is set.
       */
      public boolean hasFloat64Val() {
        return valueCase_ == 12;
      }
      /**
       * <code>double float64_val = 12;</code>
       * @return The float64Val.
       */
      public double getFloat64Val() {
        if (valueCase_ == 12) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>double float64_val = 12;</code>
       * @param value The float64Val to set.
       * @return This builder for chaining.
       */
      public Builder setFloat64Val(double value) {
        valueCase_ = 12;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double float64_val = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearFloat64Val() {
        if (valueCase_ == 12) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>float float32_val = 13;</code>
       * @return Whether the float32Val field is set.
       */
      public boolean hasFloat32Val() {
        return valueCase_ == 13;
      }
      /**
       * <code>float float32_val = 13;</code>
       * @return The float32Val.
       */
      public float getFloat32Val() {
        if (valueCase_ == 13) {
          return (java.lang.Float) value_;
        }
        return 0F;
      }
      /**
       * <code>float float32_val = 13;</code>
       * @param value The float32Val to set.
       * @return This builder for chaining.
       */
      public Builder setFloat32Val(float value) {
        valueCase_ = 13;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float float32_val = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearFloat32Val() {
        if (valueCase_ == 13) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>float float16_val = 14;</code>
       * @return Whether the float16Val field is set.
       */
      public boolean hasFloat16Val() {
        return valueCase_ == 14;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>float float16_val = 14;</code>
       * @return The float16Val.
       */
      public float getFloat16Val() {
        if (valueCase_ == 14) {
          return (java.lang.Float) value_;
        }
        return 0F;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>float float16_val = 14;</code>
       * @param value The float16Val to set.
       * @return This builder for chaining.
       */
      public Builder setFloat16Val(float value) {
        valueCase_ = 14;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Not present in protobuf
       * </pre>
       *
       * <code>float float16_val = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearFloat16Val() {
        if (valueCase_ == 14) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>uint32 char_val = 15;</code>
       * @return Whether the charVal field is set.
       */
      public boolean hasCharVal() {
        return valueCase_ == 15;
      }
      /**
       * <code>uint32 char_val = 15;</code>
       * @return The charVal.
       */
      public int getCharVal() {
        if (valueCase_ == 15) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>uint32 char_val = 15;</code>
       * @param value The charVal to set.
       * @return This builder for chaining.
       */
      public Builder setCharVal(int value) {
        valueCase_ = 15;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 char_val = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearCharVal() {
        if (valueCase_ == 15) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>bool bool_val = 16;</code>
       * @return Whether the boolVal field is set.
       */
      public boolean hasBoolVal() {
        return valueCase_ == 16;
      }
      /**
       * <code>bool bool_val = 16;</code>
       * @return The boolVal.
       */
      public boolean getBoolVal() {
        if (valueCase_ == 16) {
          return (java.lang.Boolean) value_;
        }
        return false;
      }
      /**
       * <code>bool bool_val = 16;</code>
       * @param value The boolVal to set.
       * @return This builder for chaining.
       */
      public Builder setBoolVal(boolean value) {
        valueCase_ = 16;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool bool_val = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoolVal() {
        if (valueCase_ == 16) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * We use bytes for strings because proto has an encoding
       * requirement for the proto3::string type.
       * </pre>
       *
       * <code>bytes string_val = 17;</code>
       * @return Whether the stringVal field is set.
       */
      public boolean hasStringVal() {
        return valueCase_ == 17;
      }
      /**
       * <pre>
       * We use bytes for strings because proto has an encoding
       * requirement for the proto3::string type.
       * </pre>
       *
       * <code>bytes string_val = 17;</code>
       * @return The stringVal.
       */
      public com.google.protobuf.ByteString getStringVal() {
        if (valueCase_ == 17) {
          return (com.google.protobuf.ByteString) value_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <pre>
       * We use bytes for strings because proto has an encoding
       * requirement for the proto3::string type.
       * </pre>
       *
       * <code>bytes string_val = 17;</code>
       * @param value The stringVal to set.
       * @return This builder for chaining.
       */
      public Builder setStringVal(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 17;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * We use bytes for strings because proto has an encoding
       * requirement for the proto3::string type.
       * </pre>
       *
       * <code>bytes string_val = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringVal() {
        if (valueCase_ == 17) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.PrimitiveValue)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.PrimitiveValue)
    private static final relationalai.protocol.Schema.PrimitiveValue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.PrimitiveValue();
    }

    public static relationalai.protocol.Schema.PrimitiveValue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PrimitiveValue>
        PARSER = new com.google.protobuf.AbstractParser<PrimitiveValue>() {
      @java.lang.Override
      public PrimitiveValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PrimitiveValue(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PrimitiveValue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PrimitiveValue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.PrimitiveValue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValueTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.ValueType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    java.util.List<relationalai.protocol.Schema.RelType> 
        getArgumentTypesList();
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    relationalai.protocol.Schema.RelType getArgumentTypes(int index);
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    int getArgumentTypesCount();
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    java.util.List<? extends relationalai.protocol.Schema.RelTypeOrBuilder> 
        getArgumentTypesOrBuilderList();
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    relationalai.protocol.Schema.RelTypeOrBuilder getArgumentTypesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code relationalai.protocol.ValueType}
   */
  public static final class ValueType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.ValueType)
      ValueTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ValueType.newBuilder() to construct.
    private ValueType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ValueType() {
      argumentTypes_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ValueType();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ValueType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                argumentTypes_ = new java.util.ArrayList<relationalai.protocol.Schema.RelType>();
                mutable_bitField0_ |= 0x00000001;
              }
              argumentTypes_.add(
                  input.readMessage(relationalai.protocol.Schema.RelType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          argumentTypes_ = java.util.Collections.unmodifiableList(argumentTypes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_ValueType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_ValueType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.ValueType.class, relationalai.protocol.Schema.ValueType.Builder.class);
    }

    public static final int ARGUMENT_TYPES_FIELD_NUMBER = 1;
    private java.util.List<relationalai.protocol.Schema.RelType> argumentTypes_;
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    @java.lang.Override
    public java.util.List<relationalai.protocol.Schema.RelType> getArgumentTypesList() {
      return argumentTypes_;
    }
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends relationalai.protocol.Schema.RelTypeOrBuilder> 
        getArgumentTypesOrBuilderList() {
      return argumentTypes_;
    }
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    @java.lang.Override
    public int getArgumentTypesCount() {
      return argumentTypes_.size();
    }
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelType getArgumentTypes(int index) {
      return argumentTypes_.get(index);
    }
    /**
     * <pre>
     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
     * parameters.
     * </pre>
     *
     * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelTypeOrBuilder getArgumentTypesOrBuilder(
        int index) {
      return argumentTypes_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < argumentTypes_.size(); i++) {
        output.writeMessage(1, argumentTypes_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < argumentTypes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, argumentTypes_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.ValueType)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.ValueType other = (relationalai.protocol.Schema.ValueType) obj;

      if (!getArgumentTypesList()
          .equals(other.getArgumentTypesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgumentTypesCount() > 0) {
        hash = (37 * hash) + ARGUMENT_TYPES_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentTypesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.ValueType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ValueType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.ValueType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.ValueType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.ValueType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code relationalai.protocol.ValueType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.ValueType)
        relationalai.protocol.Schema.ValueTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_ValueType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_ValueType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.ValueType.class, relationalai.protocol.Schema.ValueType.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.ValueType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgumentTypesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argumentTypesBuilder_ == null) {
          argumentTypes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argumentTypesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_ValueType_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.ValueType getDefaultInstanceForType() {
        return relationalai.protocol.Schema.ValueType.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.ValueType build() {
        relationalai.protocol.Schema.ValueType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.ValueType buildPartial() {
        relationalai.protocol.Schema.ValueType result = new relationalai.protocol.Schema.ValueType(this);
        int from_bitField0_ = bitField0_;
        if (argumentTypesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            argumentTypes_ = java.util.Collections.unmodifiableList(argumentTypes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.argumentTypes_ = argumentTypes_;
        } else {
          result.argumentTypes_ = argumentTypesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.ValueType) {
          return mergeFrom((relationalai.protocol.Schema.ValueType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.ValueType other) {
        if (other == relationalai.protocol.Schema.ValueType.getDefaultInstance()) return this;
        if (argumentTypesBuilder_ == null) {
          if (!other.argumentTypes_.isEmpty()) {
            if (argumentTypes_.isEmpty()) {
              argumentTypes_ = other.argumentTypes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentTypesIsMutable();
              argumentTypes_.addAll(other.argumentTypes_);
            }
            onChanged();
          }
        } else {
          if (!other.argumentTypes_.isEmpty()) {
            if (argumentTypesBuilder_.isEmpty()) {
              argumentTypesBuilder_.dispose();
              argumentTypesBuilder_ = null;
              argumentTypes_ = other.argumentTypes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentTypesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgumentTypesFieldBuilder() : null;
            } else {
              argumentTypesBuilder_.addAllMessages(other.argumentTypes_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.ValueType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.ValueType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<relationalai.protocol.Schema.RelType> argumentTypes_ =
        java.util.Collections.emptyList();
      private void ensureArgumentTypesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          argumentTypes_ = new java.util.ArrayList<relationalai.protocol.Schema.RelType>(argumentTypes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder> argumentTypesBuilder_;

      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public java.util.List<relationalai.protocol.Schema.RelType> getArgumentTypesList() {
        if (argumentTypesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argumentTypes_);
        } else {
          return argumentTypesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public int getArgumentTypesCount() {
        if (argumentTypesBuilder_ == null) {
          return argumentTypes_.size();
        } else {
          return argumentTypesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public relationalai.protocol.Schema.RelType getArgumentTypes(int index) {
        if (argumentTypesBuilder_ == null) {
          return argumentTypes_.get(index);
        } else {
          return argumentTypesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder setArgumentTypes(
          int index, relationalai.protocol.Schema.RelType value) {
        if (argumentTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentTypesIsMutable();
          argumentTypes_.set(index, value);
          onChanged();
        } else {
          argumentTypesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder setArgumentTypes(
          int index, relationalai.protocol.Schema.RelType.Builder builderForValue) {
        if (argumentTypesBuilder_ == null) {
          ensureArgumentTypesIsMutable();
          argumentTypes_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentTypesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder addArgumentTypes(relationalai.protocol.Schema.RelType value) {
        if (argumentTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentTypesIsMutable();
          argumentTypes_.add(value);
          onChanged();
        } else {
          argumentTypesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder addArgumentTypes(
          int index, relationalai.protocol.Schema.RelType value) {
        if (argumentTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentTypesIsMutable();
          argumentTypes_.add(index, value);
          onChanged();
        } else {
          argumentTypesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder addArgumentTypes(
          relationalai.protocol.Schema.RelType.Builder builderForValue) {
        if (argumentTypesBuilder_ == null) {
          ensureArgumentTypesIsMutable();
          argumentTypes_.add(builderForValue.build());
          onChanged();
        } else {
          argumentTypesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder addArgumentTypes(
          int index, relationalai.protocol.Schema.RelType.Builder builderForValue) {
        if (argumentTypesBuilder_ == null) {
          ensureArgumentTypesIsMutable();
          argumentTypes_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentTypesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder addAllArgumentTypes(
          java.lang.Iterable<? extends relationalai.protocol.Schema.RelType> values) {
        if (argumentTypesBuilder_ == null) {
          ensureArgumentTypesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, argumentTypes_);
          onChanged();
        } else {
          argumentTypesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder clearArgumentTypes() {
        if (argumentTypesBuilder_ == null) {
          argumentTypes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentTypesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public Builder removeArgumentTypes(int index) {
        if (argumentTypesBuilder_ == null) {
          ensureArgumentTypesIsMutable();
          argumentTypes_.remove(index);
          onChanged();
        } else {
          argumentTypesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public relationalai.protocol.Schema.RelType.Builder getArgumentTypesBuilder(
          int index) {
        return getArgumentTypesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public relationalai.protocol.Schema.RelTypeOrBuilder getArgumentTypesOrBuilder(
          int index) {
        if (argumentTypesBuilder_ == null) {
          return argumentTypes_.get(index);  } else {
          return argumentTypesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public java.util.List<? extends relationalai.protocol.Schema.RelTypeOrBuilder> 
           getArgumentTypesOrBuilderList() {
        if (argumentTypesBuilder_ != null) {
          return argumentTypesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argumentTypes_);
        }
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public relationalai.protocol.Schema.RelType.Builder addArgumentTypesBuilder() {
        return getArgumentTypesFieldBuilder().addBuilder(
            relationalai.protocol.Schema.RelType.getDefaultInstance());
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public relationalai.protocol.Schema.RelType.Builder addArgumentTypesBuilder(
          int index) {
        return getArgumentTypesFieldBuilder().addBuilder(
            index, relationalai.protocol.Schema.RelType.getDefaultInstance());
      }
      /**
       * <pre>
       * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type
       * parameters.
       * </pre>
       *
       * <code>repeated .relationalai.protocol.RelType argument_types = 1;</code>
       */
      public java.util.List<relationalai.protocol.Schema.RelType.Builder> 
           getArgumentTypesBuilderList() {
        return getArgumentTypesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder> 
          getArgumentTypesFieldBuilder() {
        if (argumentTypesBuilder_ == null) {
          argumentTypesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder>(
                  argumentTypes_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          argumentTypes_ = null;
        }
        return argumentTypesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.ValueType)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.ValueType)
    private static final relationalai.protocol.Schema.ValueType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.ValueType();
    }

    public static relationalai.protocol.Schema.ValueType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValueType>
        PARSER = new com.google.protobuf.AbstractParser<ValueType>() {
      @java.lang.Override
      public ValueType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ValueType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ValueType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValueType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.ValueType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConstantTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.ConstantType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Required
     * This is the type of the constant and describes whatever is in the RelTuple value
     * </pre>
     *
     * <code>.relationalai.protocol.RelType rel_type = 1;</code>
     * @return Whether the relType field is set.
     */
    boolean hasRelType();
    /**
     * <pre>
     * Required
     * This is the type of the constant and describes whatever is in the RelTuple value
     * </pre>
     *
     * <code>.relationalai.protocol.RelType rel_type = 1;</code>
     * @return The relType.
     */
    relationalai.protocol.Schema.RelType getRelType();
    /**
     * <pre>
     * Required
     * This is the type of the constant and describes whatever is in the RelTuple value
     * </pre>
     *
     * <code>.relationalai.protocol.RelType rel_type = 1;</code>
     */
    relationalai.protocol.Schema.RelTypeOrBuilder getRelTypeOrBuilder();

    /**
     * <pre>
     * The tuple contains only the values that are not constant.
     * E.g. for decimal[64](3.14) only 3.14 is part of the data.
     * Required
     * 
     * Tuple because of e.g. specialize on Uniform distribution 
     * </pre>
     *
     * <code>.relationalai.protocol.RelTuple value = 2;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <pre>
     * The tuple contains only the values that are not constant.
     * E.g. for decimal[64](3.14) only 3.14 is part of the data.
     * Required
     * 
     * Tuple because of e.g. specialize on Uniform distribution 
     * </pre>
     *
     * <code>.relationalai.protocol.RelTuple value = 2;</code>
     * @return The value.
     */
    relationalai.protocol.Schema.RelTuple getValue();
    /**
     * <pre>
     * The tuple contains only the values that are not constant.
     * E.g. for decimal[64](3.14) only 3.14 is part of the data.
     * Required
     * 
     * Tuple because of e.g. specialize on Uniform distribution 
     * </pre>
     *
     * <code>.relationalai.protocol.RelTuple value = 2;</code>
     */
    relationalai.protocol.Schema.RelTupleOrBuilder getValueOrBuilder();
  }
  /**
   * <pre>
   * Every value can be used as a type.
   * </pre>
   *
   * Protobuf type {@code relationalai.protocol.ConstantType}
   */
  public static final class ConstantType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.ConstantType)
      ConstantTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConstantType.newBuilder() to construct.
    private ConstantType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConstantType() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConstantType();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConstantType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              relationalai.protocol.Schema.RelType.Builder subBuilder = null;
              if (relType_ != null) {
                subBuilder = relType_.toBuilder();
              }
              relType_ = input.readMessage(relationalai.protocol.Schema.RelType.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(relType_);
                relType_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              relationalai.protocol.Schema.RelTuple.Builder subBuilder = null;
              if (value_ != null) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(relationalai.protocol.Schema.RelTuple.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_ConstantType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_ConstantType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.ConstantType.class, relationalai.protocol.Schema.ConstantType.Builder.class);
    }

    public static final int REL_TYPE_FIELD_NUMBER = 1;
    private relationalai.protocol.Schema.RelType relType_;
    /**
     * <pre>
     * Required
     * This is the type of the constant and describes whatever is in the RelTuple value
     * </pre>
     *
     * <code>.relationalai.protocol.RelType rel_type = 1;</code>
     * @return Whether the relType field is set.
     */
    @java.lang.Override
    public boolean hasRelType() {
      return relType_ != null;
    }
    /**
     * <pre>
     * Required
     * This is the type of the constant and describes whatever is in the RelTuple value
     * </pre>
     *
     * <code>.relationalai.protocol.RelType rel_type = 1;</code>
     * @return The relType.
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelType getRelType() {
      return relType_ == null ? relationalai.protocol.Schema.RelType.getDefaultInstance() : relType_;
    }
    /**
     * <pre>
     * Required
     * This is the type of the constant and describes whatever is in the RelTuple value
     * </pre>
     *
     * <code>.relationalai.protocol.RelType rel_type = 1;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelTypeOrBuilder getRelTypeOrBuilder() {
      return getRelType();
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private relationalai.protocol.Schema.RelTuple value_;
    /**
     * <pre>
     * The tuple contains only the values that are not constant.
     * E.g. for decimal[64](3.14) only 3.14 is part of the data.
     * Required
     * 
     * Tuple because of e.g. specialize on Uniform distribution 
     * </pre>
     *
     * <code>.relationalai.protocol.RelTuple value = 2;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return value_ != null;
    }
    /**
     * <pre>
     * The tuple contains only the values that are not constant.
     * E.g. for decimal[64](3.14) only 3.14 is part of the data.
     * Required
     * 
     * Tuple because of e.g. specialize on Uniform distribution 
     * </pre>
     *
     * <code>.relationalai.protocol.RelTuple value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelTuple getValue() {
      return value_ == null ? relationalai.protocol.Schema.RelTuple.getDefaultInstance() : value_;
    }
    /**
     * <pre>
     * The tuple contains only the values that are not constant.
     * E.g. for decimal[64](3.14) only 3.14 is part of the data.
     * Required
     * 
     * Tuple because of e.g. specialize on Uniform distribution 
     * </pre>
     *
     * <code>.relationalai.protocol.RelTuple value = 2;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.RelTupleOrBuilder getValueOrBuilder() {
      return getValue();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (relType_ != null) {
        output.writeMessage(1, getRelType());
      }
      if (value_ != null) {
        output.writeMessage(2, getValue());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (relType_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRelType());
      }
      if (value_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getValue());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.ConstantType)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.ConstantType other = (relationalai.protocol.Schema.ConstantType) obj;

      if (hasRelType() != other.hasRelType()) return false;
      if (hasRelType()) {
        if (!getRelType()
            .equals(other.getRelType())) return false;
      }
      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue()
            .equals(other.getValue())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRelType()) {
        hash = (37 * hash) + REL_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getRelType().hashCode();
      }
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.ConstantType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ConstantType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.ConstantType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.ConstantType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.ConstantType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Every value can be used as a type.
     * </pre>
     *
     * Protobuf type {@code relationalai.protocol.ConstantType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.ConstantType)
        relationalai.protocol.Schema.ConstantTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_ConstantType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_ConstantType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.ConstantType.class, relationalai.protocol.Schema.ConstantType.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.ConstantType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (relTypeBuilder_ == null) {
          relType_ = null;
        } else {
          relType_ = null;
          relTypeBuilder_ = null;
        }
        if (valueBuilder_ == null) {
          value_ = null;
        } else {
          value_ = null;
          valueBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_ConstantType_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.ConstantType getDefaultInstanceForType() {
        return relationalai.protocol.Schema.ConstantType.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.ConstantType build() {
        relationalai.protocol.Schema.ConstantType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.ConstantType buildPartial() {
        relationalai.protocol.Schema.ConstantType result = new relationalai.protocol.Schema.ConstantType(this);
        if (relTypeBuilder_ == null) {
          result.relType_ = relType_;
        } else {
          result.relType_ = relTypeBuilder_.build();
        }
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.ConstantType) {
          return mergeFrom((relationalai.protocol.Schema.ConstantType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.ConstantType other) {
        if (other == relationalai.protocol.Schema.ConstantType.getDefaultInstance()) return this;
        if (other.hasRelType()) {
          mergeRelType(other.getRelType());
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.ConstantType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.ConstantType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private relationalai.protocol.Schema.RelType relType_;
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder> relTypeBuilder_;
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       * @return Whether the relType field is set.
       */
      public boolean hasRelType() {
        return relTypeBuilder_ != null || relType_ != null;
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       * @return The relType.
       */
      public relationalai.protocol.Schema.RelType getRelType() {
        if (relTypeBuilder_ == null) {
          return relType_ == null ? relationalai.protocol.Schema.RelType.getDefaultInstance() : relType_;
        } else {
          return relTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       */
      public Builder setRelType(relationalai.protocol.Schema.RelType value) {
        if (relTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          relType_ = value;
          onChanged();
        } else {
          relTypeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       */
      public Builder setRelType(
          relationalai.protocol.Schema.RelType.Builder builderForValue) {
        if (relTypeBuilder_ == null) {
          relType_ = builderForValue.build();
          onChanged();
        } else {
          relTypeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       */
      public Builder mergeRelType(relationalai.protocol.Schema.RelType value) {
        if (relTypeBuilder_ == null) {
          if (relType_ != null) {
            relType_ =
              relationalai.protocol.Schema.RelType.newBuilder(relType_).mergeFrom(value).buildPartial();
          } else {
            relType_ = value;
          }
          onChanged();
        } else {
          relTypeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       */
      public Builder clearRelType() {
        if (relTypeBuilder_ == null) {
          relType_ = null;
          onChanged();
        } else {
          relType_ = null;
          relTypeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       */
      public relationalai.protocol.Schema.RelType.Builder getRelTypeBuilder() {
        
        onChanged();
        return getRelTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       */
      public relationalai.protocol.Schema.RelTypeOrBuilder getRelTypeOrBuilder() {
        if (relTypeBuilder_ != null) {
          return relTypeBuilder_.getMessageOrBuilder();
        } else {
          return relType_ == null ?
              relationalai.protocol.Schema.RelType.getDefaultInstance() : relType_;
        }
      }
      /**
       * <pre>
       * Required
       * This is the type of the constant and describes whatever is in the RelTuple value
       * </pre>
       *
       * <code>.relationalai.protocol.RelType rel_type = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder> 
          getRelTypeFieldBuilder() {
        if (relTypeBuilder_ == null) {
          relTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              relationalai.protocol.Schema.RelType, relationalai.protocol.Schema.RelType.Builder, relationalai.protocol.Schema.RelTypeOrBuilder>(
                  getRelType(),
                  getParentForChildren(),
                  isClean());
          relType_ = null;
        }
        return relTypeBuilder_;
      }

      private relationalai.protocol.Schema.RelTuple value_;
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelTuple, relationalai.protocol.Schema.RelTuple.Builder, relationalai.protocol.Schema.RelTupleOrBuilder> valueBuilder_;
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return valueBuilder_ != null || value_ != null;
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       * @return The value.
       */
      public relationalai.protocol.Schema.RelTuple getValue() {
        if (valueBuilder_ == null) {
          return value_ == null ? relationalai.protocol.Schema.RelTuple.getDefaultInstance() : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       */
      public Builder setValue(relationalai.protocol.Schema.RelTuple value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       */
      public Builder setValue(
          relationalai.protocol.Schema.RelTuple.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       */
      public Builder mergeValue(relationalai.protocol.Schema.RelTuple value) {
        if (valueBuilder_ == null) {
          if (value_ != null) {
            value_ =
              relationalai.protocol.Schema.RelTuple.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = null;
          onChanged();
        } else {
          value_ = null;
          valueBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       */
      public relationalai.protocol.Schema.RelTuple.Builder getValueBuilder() {
        
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       */
      public relationalai.protocol.Schema.RelTupleOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null ?
              relationalai.protocol.Schema.RelTuple.getDefaultInstance() : value_;
        }
      }
      /**
       * <pre>
       * The tuple contains only the values that are not constant.
       * E.g. for decimal[64](3.14) only 3.14 is part of the data.
       * Required
       * 
       * Tuple because of e.g. specialize on Uniform distribution 
       * </pre>
       *
       * <code>.relationalai.protocol.RelTuple value = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.RelTuple, relationalai.protocol.Schema.RelTuple.Builder, relationalai.protocol.Schema.RelTupleOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              relationalai.protocol.Schema.RelTuple, relationalai.protocol.Schema.RelTuple.Builder, relationalai.protocol.Schema.RelTupleOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.ConstantType)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.ConstantType)
    private static final relationalai.protocol.Schema.ConstantType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.ConstantType();
    }

    public static relationalai.protocol.Schema.ConstantType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConstantType>
        PARSER = new com.google.protobuf.AbstractParser<ConstantType>() {
      @java.lang.Override
      public ConstantType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConstantType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConstantType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConstantType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.ConstantType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RelTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:relationalai.protocol.RelType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.relationalai.protocol.Kind tag = 1;</code>
     * @return The enum numeric value on the wire for tag.
     */
    int getTagValue();
    /**
     * <code>.relationalai.protocol.Kind tag = 1;</code>
     * @return The tag.
     */
    relationalai.protocol.Schema.Kind getTag();

    /**
     * <pre>
     * Only one of the following is allowed.
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
     * @return The enum numeric value on the wire for primitiveType.
     */
    int getPrimitiveTypeValue();
    /**
     * <pre>
     * Only one of the following is allowed.
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
     * @return The primitiveType.
     */
    relationalai.protocol.Schema.PrimitiveType getPrimitiveType();

    /**
     * <code>.relationalai.protocol.ValueType value_type = 3;</code>
     * @return Whether the valueType field is set.
     */
    boolean hasValueType();
    /**
     * <code>.relationalai.protocol.ValueType value_type = 3;</code>
     * @return The valueType.
     */
    relationalai.protocol.Schema.ValueType getValueType();
    /**
     * <code>.relationalai.protocol.ValueType value_type = 3;</code>
     */
    relationalai.protocol.Schema.ValueTypeOrBuilder getValueTypeOrBuilder();

    /**
     * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
     * @return Whether the constantType field is set.
     */
    boolean hasConstantType();
    /**
     * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
     * @return The constantType.
     */
    relationalai.protocol.Schema.ConstantType getConstantType();
    /**
     * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
     */
    relationalai.protocol.Schema.ConstantTypeOrBuilder getConstantTypeOrBuilder();
  }
  /**
   * <pre>
   * Union
   * </pre>
   *
   * Protobuf type {@code relationalai.protocol.RelType}
   */
  public static final class RelType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:relationalai.protocol.RelType)
      RelTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RelType.newBuilder() to construct.
    private RelType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RelType() {
      tag_ = 0;
      primitiveType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RelType();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RelType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              tag_ = rawValue;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              primitiveType_ = rawValue;
              break;
            }
            case 26: {
              relationalai.protocol.Schema.ValueType.Builder subBuilder = null;
              if (valueType_ != null) {
                subBuilder = valueType_.toBuilder();
              }
              valueType_ = input.readMessage(relationalai.protocol.Schema.ValueType.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(valueType_);
                valueType_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              relationalai.protocol.Schema.ConstantType.Builder subBuilder = null;
              if (constantType_ != null) {
                subBuilder = constantType_.toBuilder();
              }
              constantType_ = input.readMessage(relationalai.protocol.Schema.ConstantType.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(constantType_);
                constantType_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              relationalai.protocol.Schema.RelType.class, relationalai.protocol.Schema.RelType.Builder.class);
    }

    public static final int TAG_FIELD_NUMBER = 1;
    private int tag_;
    /**
     * <code>.relationalai.protocol.Kind tag = 1;</code>
     * @return The enum numeric value on the wire for tag.
     */
    @java.lang.Override public int getTagValue() {
      return tag_;
    }
    /**
     * <code>.relationalai.protocol.Kind tag = 1;</code>
     * @return The tag.
     */
    @java.lang.Override public relationalai.protocol.Schema.Kind getTag() {
      @SuppressWarnings("deprecation")
      relationalai.protocol.Schema.Kind result = relationalai.protocol.Schema.Kind.valueOf(tag_);
      return result == null ? relationalai.protocol.Schema.Kind.UNRECOGNIZED : result;
    }

    public static final int PRIMITIVE_TYPE_FIELD_NUMBER = 2;
    private int primitiveType_;
    /**
     * <pre>
     * Only one of the following is allowed.
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
     * @return The enum numeric value on the wire for primitiveType.
     */
    @java.lang.Override public int getPrimitiveTypeValue() {
      return primitiveType_;
    }
    /**
     * <pre>
     * Only one of the following is allowed.
     * </pre>
     *
     * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
     * @return The primitiveType.
     */
    @java.lang.Override public relationalai.protocol.Schema.PrimitiveType getPrimitiveType() {
      @SuppressWarnings("deprecation")
      relationalai.protocol.Schema.PrimitiveType result = relationalai.protocol.Schema.PrimitiveType.valueOf(primitiveType_);
      return result == null ? relationalai.protocol.Schema.PrimitiveType.UNRECOGNIZED : result;
    }

    public static final int VALUE_TYPE_FIELD_NUMBER = 3;
    private relationalai.protocol.Schema.ValueType valueType_;
    /**
     * <code>.relationalai.protocol.ValueType value_type = 3;</code>
     * @return Whether the valueType field is set.
     */
    @java.lang.Override
    public boolean hasValueType() {
      return valueType_ != null;
    }
    /**
     * <code>.relationalai.protocol.ValueType value_type = 3;</code>
     * @return The valueType.
     */
    @java.lang.Override
    public relationalai.protocol.Schema.ValueType getValueType() {
      return valueType_ == null ? relationalai.protocol.Schema.ValueType.getDefaultInstance() : valueType_;
    }
    /**
     * <code>.relationalai.protocol.ValueType value_type = 3;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.ValueTypeOrBuilder getValueTypeOrBuilder() {
      return getValueType();
    }

    public static final int CONSTANT_TYPE_FIELD_NUMBER = 4;
    private relationalai.protocol.Schema.ConstantType constantType_;
    /**
     * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
     * @return Whether the constantType field is set.
     */
    @java.lang.Override
    public boolean hasConstantType() {
      return constantType_ != null;
    }
    /**
     * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
     * @return The constantType.
     */
    @java.lang.Override
    public relationalai.protocol.Schema.ConstantType getConstantType() {
      return constantType_ == null ? relationalai.protocol.Schema.ConstantType.getDefaultInstance() : constantType_;
    }
    /**
     * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
     */
    @java.lang.Override
    public relationalai.protocol.Schema.ConstantTypeOrBuilder getConstantTypeOrBuilder() {
      return getConstantType();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (tag_ != relationalai.protocol.Schema.Kind.UNSPECIFIED_KIND.getNumber()) {
        output.writeEnum(1, tag_);
      }
      if (primitiveType_ != relationalai.protocol.Schema.PrimitiveType.UNSPECIFIED_TYPE.getNumber()) {
        output.writeEnum(2, primitiveType_);
      }
      if (valueType_ != null) {
        output.writeMessage(3, getValueType());
      }
      if (constantType_ != null) {
        output.writeMessage(4, getConstantType());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (tag_ != relationalai.protocol.Schema.Kind.UNSPECIFIED_KIND.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, tag_);
      }
      if (primitiveType_ != relationalai.protocol.Schema.PrimitiveType.UNSPECIFIED_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, primitiveType_);
      }
      if (valueType_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getValueType());
      }
      if (constantType_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getConstantType());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof relationalai.protocol.Schema.RelType)) {
        return super.equals(obj);
      }
      relationalai.protocol.Schema.RelType other = (relationalai.protocol.Schema.RelType) obj;

      if (tag_ != other.tag_) return false;
      if (primitiveType_ != other.primitiveType_) return false;
      if (hasValueType() != other.hasValueType()) return false;
      if (hasValueType()) {
        if (!getValueType()
            .equals(other.getValueType())) return false;
      }
      if (hasConstantType() != other.hasConstantType()) return false;
      if (hasConstantType()) {
        if (!getConstantType()
            .equals(other.getConstantType())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TAG_FIELD_NUMBER;
      hash = (53 * hash) + tag_;
      hash = (37 * hash) + PRIMITIVE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + primitiveType_;
      if (hasValueType()) {
        hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getValueType().hashCode();
      }
      if (hasConstantType()) {
        hash = (37 * hash) + CONSTANT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getConstantType().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static relationalai.protocol.Schema.RelType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static relationalai.protocol.Schema.RelType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(relationalai.protocol.Schema.RelType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Union
     * </pre>
     *
     * Protobuf type {@code relationalai.protocol.RelType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:relationalai.protocol.RelType)
        relationalai.protocol.Schema.RelTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                relationalai.protocol.Schema.RelType.class, relationalai.protocol.Schema.RelType.Builder.class);
      }

      // Construct using relationalai.protocol.Schema.RelType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        tag_ = 0;

        primitiveType_ = 0;

        if (valueTypeBuilder_ == null) {
          valueType_ = null;
        } else {
          valueType_ = null;
          valueTypeBuilder_ = null;
        }
        if (constantTypeBuilder_ == null) {
          constantType_ = null;
        } else {
          constantType_ = null;
          constantTypeBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return relationalai.protocol.Schema.internal_static_relationalai_protocol_RelType_descriptor;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelType getDefaultInstanceForType() {
        return relationalai.protocol.Schema.RelType.getDefaultInstance();
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelType build() {
        relationalai.protocol.Schema.RelType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public relationalai.protocol.Schema.RelType buildPartial() {
        relationalai.protocol.Schema.RelType result = new relationalai.protocol.Schema.RelType(this);
        result.tag_ = tag_;
        result.primitiveType_ = primitiveType_;
        if (valueTypeBuilder_ == null) {
          result.valueType_ = valueType_;
        } else {
          result.valueType_ = valueTypeBuilder_.build();
        }
        if (constantTypeBuilder_ == null) {
          result.constantType_ = constantType_;
        } else {
          result.constantType_ = constantTypeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof relationalai.protocol.Schema.RelType) {
          return mergeFrom((relationalai.protocol.Schema.RelType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(relationalai.protocol.Schema.RelType other) {
        if (other == relationalai.protocol.Schema.RelType.getDefaultInstance()) return this;
        if (other.tag_ != 0) {
          setTagValue(other.getTagValue());
        }
        if (other.primitiveType_ != 0) {
          setPrimitiveTypeValue(other.getPrimitiveTypeValue());
        }
        if (other.hasValueType()) {
          mergeValueType(other.getValueType());
        }
        if (other.hasConstantType()) {
          mergeConstantType(other.getConstantType());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        relationalai.protocol.Schema.RelType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (relationalai.protocol.Schema.RelType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int tag_ = 0;
      /**
       * <code>.relationalai.protocol.Kind tag = 1;</code>
       * @return The enum numeric value on the wire for tag.
       */
      @java.lang.Override public int getTagValue() {
        return tag_;
      }
      /**
       * <code>.relationalai.protocol.Kind tag = 1;</code>
       * @param value The enum numeric value on the wire for tag to set.
       * @return This builder for chaining.
       */
      public Builder setTagValue(int value) {
        
        tag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.relationalai.protocol.Kind tag = 1;</code>
       * @return The tag.
       */
      @java.lang.Override
      public relationalai.protocol.Schema.Kind getTag() {
        @SuppressWarnings("deprecation")
        relationalai.protocol.Schema.Kind result = relationalai.protocol.Schema.Kind.valueOf(tag_);
        return result == null ? relationalai.protocol.Schema.Kind.UNRECOGNIZED : result;
      }
      /**
       * <code>.relationalai.protocol.Kind tag = 1;</code>
       * @param value The tag to set.
       * @return This builder for chaining.
       */
      public Builder setTag(relationalai.protocol.Schema.Kind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        tag_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.relationalai.protocol.Kind tag = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTag() {
        
        tag_ = 0;
        onChanged();
        return this;
      }

      private int primitiveType_ = 0;
      /**
       * <pre>
       * Only one of the following is allowed.
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
       * @return The enum numeric value on the wire for primitiveType.
       */
      @java.lang.Override public int getPrimitiveTypeValue() {
        return primitiveType_;
      }
      /**
       * <pre>
       * Only one of the following is allowed.
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
       * @param value The enum numeric value on the wire for primitiveType to set.
       * @return This builder for chaining.
       */
      public Builder setPrimitiveTypeValue(int value) {
        
        primitiveType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of the following is allowed.
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
       * @return The primitiveType.
       */
      @java.lang.Override
      public relationalai.protocol.Schema.PrimitiveType getPrimitiveType() {
        @SuppressWarnings("deprecation")
        relationalai.protocol.Schema.PrimitiveType result = relationalai.protocol.Schema.PrimitiveType.valueOf(primitiveType_);
        return result == null ? relationalai.protocol.Schema.PrimitiveType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Only one of the following is allowed.
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
       * @param value The primitiveType to set.
       * @return This builder for chaining.
       */
      public Builder setPrimitiveType(relationalai.protocol.Schema.PrimitiveType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        primitiveType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of the following is allowed.
       * </pre>
       *
       * <code>.relationalai.protocol.PrimitiveType primitive_type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrimitiveType() {
        
        primitiveType_ = 0;
        onChanged();
        return this;
      }

      private relationalai.protocol.Schema.ValueType valueType_;
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.ValueType, relationalai.protocol.Schema.ValueType.Builder, relationalai.protocol.Schema.ValueTypeOrBuilder> valueTypeBuilder_;
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       * @return Whether the valueType field is set.
       */
      public boolean hasValueType() {
        return valueTypeBuilder_ != null || valueType_ != null;
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       * @return The valueType.
       */
      public relationalai.protocol.Schema.ValueType getValueType() {
        if (valueTypeBuilder_ == null) {
          return valueType_ == null ? relationalai.protocol.Schema.ValueType.getDefaultInstance() : valueType_;
        } else {
          return valueTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       */
      public Builder setValueType(relationalai.protocol.Schema.ValueType value) {
        if (valueTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          valueType_ = value;
          onChanged();
        } else {
          valueTypeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       */
      public Builder setValueType(
          relationalai.protocol.Schema.ValueType.Builder builderForValue) {
        if (valueTypeBuilder_ == null) {
          valueType_ = builderForValue.build();
          onChanged();
        } else {
          valueTypeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       */
      public Builder mergeValueType(relationalai.protocol.Schema.ValueType value) {
        if (valueTypeBuilder_ == null) {
          if (valueType_ != null) {
            valueType_ =
              relationalai.protocol.Schema.ValueType.newBuilder(valueType_).mergeFrom(value).buildPartial();
          } else {
            valueType_ = value;
          }
          onChanged();
        } else {
          valueTypeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       */
      public Builder clearValueType() {
        if (valueTypeBuilder_ == null) {
          valueType_ = null;
          onChanged();
        } else {
          valueType_ = null;
          valueTypeBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       */
      public relationalai.protocol.Schema.ValueType.Builder getValueTypeBuilder() {
        
        onChanged();
        return getValueTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       */
      public relationalai.protocol.Schema.ValueTypeOrBuilder getValueTypeOrBuilder() {
        if (valueTypeBuilder_ != null) {
          return valueTypeBuilder_.getMessageOrBuilder();
        } else {
          return valueType_ == null ?
              relationalai.protocol.Schema.ValueType.getDefaultInstance() : valueType_;
        }
      }
      /**
       * <code>.relationalai.protocol.ValueType value_type = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.ValueType, relationalai.protocol.Schema.ValueType.Builder, relationalai.protocol.Schema.ValueTypeOrBuilder> 
          getValueTypeFieldBuilder() {
        if (valueTypeBuilder_ == null) {
          valueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              relationalai.protocol.Schema.ValueType, relationalai.protocol.Schema.ValueType.Builder, relationalai.protocol.Schema.ValueTypeOrBuilder>(
                  getValueType(),
                  getParentForChildren(),
                  isClean());
          valueType_ = null;
        }
        return valueTypeBuilder_;
      }

      private relationalai.protocol.Schema.ConstantType constantType_;
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.ConstantType, relationalai.protocol.Schema.ConstantType.Builder, relationalai.protocol.Schema.ConstantTypeOrBuilder> constantTypeBuilder_;
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       * @return Whether the constantType field is set.
       */
      public boolean hasConstantType() {
        return constantTypeBuilder_ != null || constantType_ != null;
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       * @return The constantType.
       */
      public relationalai.protocol.Schema.ConstantType getConstantType() {
        if (constantTypeBuilder_ == null) {
          return constantType_ == null ? relationalai.protocol.Schema.ConstantType.getDefaultInstance() : constantType_;
        } else {
          return constantTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       */
      public Builder setConstantType(relationalai.protocol.Schema.ConstantType value) {
        if (constantTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          constantType_ = value;
          onChanged();
        } else {
          constantTypeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       */
      public Builder setConstantType(
          relationalai.protocol.Schema.ConstantType.Builder builderForValue) {
        if (constantTypeBuilder_ == null) {
          constantType_ = builderForValue.build();
          onChanged();
        } else {
          constantTypeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       */
      public Builder mergeConstantType(relationalai.protocol.Schema.ConstantType value) {
        if (constantTypeBuilder_ == null) {
          if (constantType_ != null) {
            constantType_ =
              relationalai.protocol.Schema.ConstantType.newBuilder(constantType_).mergeFrom(value).buildPartial();
          } else {
            constantType_ = value;
          }
          onChanged();
        } else {
          constantTypeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       */
      public Builder clearConstantType() {
        if (constantTypeBuilder_ == null) {
          constantType_ = null;
          onChanged();
        } else {
          constantType_ = null;
          constantTypeBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       */
      public relationalai.protocol.Schema.ConstantType.Builder getConstantTypeBuilder() {
        
        onChanged();
        return getConstantTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       */
      public relationalai.protocol.Schema.ConstantTypeOrBuilder getConstantTypeOrBuilder() {
        if (constantTypeBuilder_ != null) {
          return constantTypeBuilder_.getMessageOrBuilder();
        } else {
          return constantType_ == null ?
              relationalai.protocol.Schema.ConstantType.getDefaultInstance() : constantType_;
        }
      }
      /**
       * <code>.relationalai.protocol.ConstantType constant_type = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          relationalai.protocol.Schema.ConstantType, relationalai.protocol.Schema.ConstantType.Builder, relationalai.protocol.Schema.ConstantTypeOrBuilder> 
          getConstantTypeFieldBuilder() {
        if (constantTypeBuilder_ == null) {
          constantTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              relationalai.protocol.Schema.ConstantType, relationalai.protocol.Schema.ConstantType.Builder, relationalai.protocol.Schema.ConstantTypeOrBuilder>(
                  getConstantType(),
                  getParentForChildren(),
                  isClean());
          constantType_ = null;
        }
        return constantTypeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:relationalai.protocol.RelType)
    }

    // @@protoc_insertion_point(class_scope:relationalai.protocol.RelType)
    private static final relationalai.protocol.Schema.RelType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new relationalai.protocol.Schema.RelType();
    }

    public static relationalai.protocol.Schema.RelType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RelType>
        PARSER = new com.google.protobuf.AbstractParser<RelType>() {
      @java.lang.Override
      public RelType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RelType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RelType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RelType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public relationalai.protocol.Schema.RelType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_RelationId_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_RelationId_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_RelTuple_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_RelTuple_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_RelInt128_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_RelInt128_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_RelUInt128_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_RelUInt128_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_PrimitiveValue_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_PrimitiveValue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_ValueType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_ValueType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_ConstantType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_ConstantType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_relationalai_protocol_RelType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_relationalai_protocol_RelType_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014schema.proto\022\025relationalai.protocol\"?\n" +
      "\nRelationId\0221\n\targuments\030\001 \003(\0132\036.relatio" +
      "nalai.protocol.RelType\"D\n\010RelTuple\0228\n\tar" +
      "guments\030\001 \003(\0132%.relationalai.protocol.Pr" +
      "imitiveValue\".\n\tRelInt128\022\020\n\010highbits\030\001 " +
      "\001(\004\022\017\n\007lowbits\030\002 \001(\004\"/\n\nRelUInt128\022\020\n\010hi" +
      "ghbits\030\001 \001(\004\022\017\n\007lowbits\030\002 \001(\004\"\353\003\n\016Primit" +
      "iveValue\0221\n\003tag\030\001 \001(\0162$.relationalai.pro" +
      "tocol.PrimitiveType\0226\n\nint128_val\030\002 \001(\0132" +
      " .relationalai.protocol.RelInt128H\000\022\023\n\ti" +
      "nt64_val\030\003 \001(\003H\000\022\023\n\tint32_val\030\004 \001(\005H\000\022\023\n" +
      "\tint16_val\030\005 \001(\005H\000\022\022\n\010int8_val\030\006 \001(\005H\000\0228" +
      "\n\013uint128_val\030\007 \001(\0132!.relationalai.proto" +
      "col.RelUInt128H\000\022\024\n\nuint64_val\030\010 \001(\004H\000\022\024" +
      "\n\nuint32_val\030\t \001(\rH\000\022\024\n\nuint16_val\030\n \001(\r" +
      "H\000\022\023\n\tuint8_val\030\013 \001(\rH\000\022\025\n\013float64_val\030\014" +
      " \001(\001H\000\022\025\n\013float32_val\030\r \001(\002H\000\022\025\n\013float16" +
      "_val\030\016 \001(\002H\000\022\022\n\010char_val\030\017 \001(\rH\000\022\022\n\010bool" +
      "_val\030\020 \001(\010H\000\022\024\n\nstring_val\030\021 \001(\014H\000B\007\n\005va" +
      "lue\"C\n\tValueType\0226\n\016argument_types\030\001 \003(\013" +
      "2\036.relationalai.protocol.RelType\"p\n\014Cons" +
      "tantType\0220\n\010rel_type\030\001 \001(\0132\036.relationala" +
      "i.protocol.RelType\022.\n\005value\030\002 \001(\0132\037.rela" +
      "tionalai.protocol.RelTuple\"\343\001\n\007RelType\022(" +
      "\n\003tag\030\001 \001(\0162\033.relationalai.protocol.Kind" +
      "\022<\n\016primitive_type\030\002 \001(\0162$.relationalai." +
      "protocol.PrimitiveType\0224\n\nvalue_type\030\003 \001" +
      "(\0132 .relationalai.protocol.ValueType\022:\n\r" +
      "constant_type\030\004 \001(\0132#.relationalai.proto" +
      "col.ConstantType*\222\002\n\rPrimitiveType\022\024\n\020UN" +
      "SPECIFIED_TYPE\020\000\022\013\n\007INT_128\020\001\022\n\n\006INT_64\020" +
      "\002\022\n\n\006INT_32\020\003\022\n\n\006INT_16\020\004\022\t\n\005INT_8\020\005\022\014\n\010" +
      "UINT_128\020\006\022\013\n\007UINT_64\020\007\022\013\n\007UINT_32\020\010\022\013\n\007" +
      "UINT_16\020\t\022\n\n\006UINT_8\020\n\022\014\n\010FLOAT_64\020\013\022\014\n\010F" +
      "LOAT_32\020\014\022\014\n\010FLOAT_16\020\r\022\010\n\004CHAR\020\016\022\010\n\004BOO" +
      "L\020\017\022\n\n\006STRING\020\020\022\n\n\006SYMBOL\020\021\022\030\n\024VARIABLE_" +
      "SIZE_STRING\020\022*S\n\004Kind\022\024\n\020UNSPECIFIED_KIN" +
      "D\020\000\022\022\n\016PRIMITIVE_TYPE\020\001\022\016\n\nVALUE_TYPE\020\002\022" +
      "\021\n\rCONSTANT_TYPE\020\003b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_relationalai_protocol_RelationId_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_relationalai_protocol_RelationId_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_RelationId_descriptor,
        new java.lang.String[] { "Arguments", });
    internal_static_relationalai_protocol_RelTuple_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_relationalai_protocol_RelTuple_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_RelTuple_descriptor,
        new java.lang.String[] { "Arguments", });
    internal_static_relationalai_protocol_RelInt128_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_relationalai_protocol_RelInt128_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_RelInt128_descriptor,
        new java.lang.String[] { "Highbits", "Lowbits", });
    internal_static_relationalai_protocol_RelUInt128_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_relationalai_protocol_RelUInt128_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_RelUInt128_descriptor,
        new java.lang.String[] { "Highbits", "Lowbits", });
    internal_static_relationalai_protocol_PrimitiveValue_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_relationalai_protocol_PrimitiveValue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_PrimitiveValue_descriptor,
        new java.lang.String[] { "Tag", "Int128Val", "Int64Val", "Int32Val", "Int16Val", "Int8Val", "Uint128Val", "Uint64Val", "Uint32Val", "Uint16Val", "Uint8Val", "Float64Val", "Float32Val", "Float16Val", "CharVal", "BoolVal", "StringVal", "Value", });
    internal_static_relationalai_protocol_ValueType_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_relationalai_protocol_ValueType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_ValueType_descriptor,
        new java.lang.String[] { "ArgumentTypes", });
    internal_static_relationalai_protocol_ConstantType_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_relationalai_protocol_ConstantType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_ConstantType_descriptor,
        new java.lang.String[] { "RelType", "Value", });
    internal_static_relationalai_protocol_RelType_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_relationalai_protocol_RelType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_relationalai_protocol_RelType_descriptor,
        new java.lang.String[] { "Tag", "PrimitiveType", "ValueType", "ConstantType", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
